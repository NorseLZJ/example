// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `BaseDefine.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:pbdef.CommonReqRepeatedCarryData_uint32)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CommonReqRepeatedCarryData_uint32 {
    // message fields
    // @@protoc_insertion_point(field:pbdef.CommonReqRepeatedCarryData_uint32.data)
    pub data: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.CommonReqRepeatedCarryData_uint32.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CommonReqRepeatedCarryData_uint32 {
    fn default() -> &'a CommonReqRepeatedCarryData_uint32 {
        <CommonReqRepeatedCarryData_uint32 as ::protobuf::Message>::default_instance()
    }
}

impl CommonReqRepeatedCarryData_uint32 {
    pub fn new() -> CommonReqRepeatedCarryData_uint32 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data",
            |m: &CommonReqRepeatedCarryData_uint32| { &m.data },
            |m: &mut CommonReqRepeatedCarryData_uint32| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CommonReqRepeatedCarryData_uint32>(
            "CommonReqRepeatedCarryData_uint32",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CommonReqRepeatedCarryData_uint32 {
    const NAME: &'static str = "CommonReqRepeatedCarryData_uint32";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.data)?;
                },
                8 => {
                    self.data.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CommonReqRepeatedCarryData_uint32 {
        CommonReqRepeatedCarryData_uint32::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CommonReqRepeatedCarryData_uint32 {
        static instance: CommonReqRepeatedCarryData_uint32 = CommonReqRepeatedCarryData_uint32 {
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CommonReqRepeatedCarryData_uint32 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CommonReqRepeatedCarryData_uint32").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CommonReqRepeatedCarryData_uint32 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommonReqRepeatedCarryData_uint32 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.CommonReqRepeatedCarryData_uint64)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CommonReqRepeatedCarryData_uint64 {
    // message fields
    // @@protoc_insertion_point(field:pbdef.CommonReqRepeatedCarryData_uint64.data)
    pub data: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.CommonReqRepeatedCarryData_uint64.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CommonReqRepeatedCarryData_uint64 {
    fn default() -> &'a CommonReqRepeatedCarryData_uint64 {
        <CommonReqRepeatedCarryData_uint64 as ::protobuf::Message>::default_instance()
    }
}

impl CommonReqRepeatedCarryData_uint64 {
    pub fn new() -> CommonReqRepeatedCarryData_uint64 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data",
            |m: &CommonReqRepeatedCarryData_uint64| { &m.data },
            |m: &mut CommonReqRepeatedCarryData_uint64| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CommonReqRepeatedCarryData_uint64>(
            "CommonReqRepeatedCarryData_uint64",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CommonReqRepeatedCarryData_uint64 {
    const NAME: &'static str = "CommonReqRepeatedCarryData_uint64";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint64_into(&mut self.data)?;
                },
                8 => {
                    self.data.push(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data {
            my_size += ::protobuf::rt::uint64_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data {
            os.write_uint64(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CommonReqRepeatedCarryData_uint64 {
        CommonReqRepeatedCarryData_uint64::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CommonReqRepeatedCarryData_uint64 {
        static instance: CommonReqRepeatedCarryData_uint64 = CommonReqRepeatedCarryData_uint64 {
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CommonReqRepeatedCarryData_uint64 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CommonReqRepeatedCarryData_uint64").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CommonReqRepeatedCarryData_uint64 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommonReqRepeatedCarryData_uint64 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.CommonReqRepeatedCarryData_string)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CommonReqRepeatedCarryData_string {
    // message fields
    // @@protoc_insertion_point(field:pbdef.CommonReqRepeatedCarryData_string.data)
    pub data: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.CommonReqRepeatedCarryData_string.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CommonReqRepeatedCarryData_string {
    fn default() -> &'a CommonReqRepeatedCarryData_string {
        <CommonReqRepeatedCarryData_string as ::protobuf::Message>::default_instance()
    }
}

impl CommonReqRepeatedCarryData_string {
    pub fn new() -> CommonReqRepeatedCarryData_string {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data",
            |m: &CommonReqRepeatedCarryData_string| { &m.data },
            |m: &mut CommonReqRepeatedCarryData_string| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CommonReqRepeatedCarryData_string>(
            "CommonReqRepeatedCarryData_string",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CommonReqRepeatedCarryData_string {
    const NAME: &'static str = "CommonReqRepeatedCarryData_string";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CommonReqRepeatedCarryData_string {
        CommonReqRepeatedCarryData_string::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CommonReqRepeatedCarryData_string {
        static instance: CommonReqRepeatedCarryData_string = CommonReqRepeatedCarryData_string {
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CommonReqRepeatedCarryData_string {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CommonReqRepeatedCarryData_string").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CommonReqRepeatedCarryData_string {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommonReqRepeatedCarryData_string {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.CommonReqRepeatedCarryData_KeyValuePairStringString)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CommonReqRepeatedCarryData_KeyValuePairStringString {
    // message fields
    // @@protoc_insertion_point(field:pbdef.CommonReqRepeatedCarryData_KeyValuePairStringString.data)
    pub data: ::std::vec::Vec<KeyValuePairStringString>,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.CommonReqRepeatedCarryData_KeyValuePairStringString.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CommonReqRepeatedCarryData_KeyValuePairStringString {
    fn default() -> &'a CommonReqRepeatedCarryData_KeyValuePairStringString {
        <CommonReqRepeatedCarryData_KeyValuePairStringString as ::protobuf::Message>::default_instance()
    }
}

impl CommonReqRepeatedCarryData_KeyValuePairStringString {
    pub fn new() -> CommonReqRepeatedCarryData_KeyValuePairStringString {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data",
            |m: &CommonReqRepeatedCarryData_KeyValuePairStringString| { &m.data },
            |m: &mut CommonReqRepeatedCarryData_KeyValuePairStringString| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CommonReqRepeatedCarryData_KeyValuePairStringString>(
            "CommonReqRepeatedCarryData_KeyValuePairStringString",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CommonReqRepeatedCarryData_KeyValuePairStringString {
    const NAME: &'static str = "CommonReqRepeatedCarryData_KeyValuePairStringString";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.data {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CommonReqRepeatedCarryData_KeyValuePairStringString {
        CommonReqRepeatedCarryData_KeyValuePairStringString::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CommonReqRepeatedCarryData_KeyValuePairStringString {
        static instance: CommonReqRepeatedCarryData_KeyValuePairStringString = CommonReqRepeatedCarryData_KeyValuePairStringString {
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CommonReqRepeatedCarryData_KeyValuePairStringString {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CommonReqRepeatedCarryData_KeyValuePairStringString").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CommonReqRepeatedCarryData_KeyValuePairStringString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommonReqRepeatedCarryData_KeyValuePairStringString {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.KeyValuePairIntInt)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyValuePairIntInt {
    // message fields
    // @@protoc_insertion_point(field:pbdef.KeyValuePairIntInt.key)
    pub key: u32,
    // @@protoc_insertion_point(field:pbdef.KeyValuePairIntInt.value)
    pub value: u32,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.KeyValuePairIntInt.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyValuePairIntInt {
    fn default() -> &'a KeyValuePairIntInt {
        <KeyValuePairIntInt as ::protobuf::Message>::default_instance()
    }
}

impl KeyValuePairIntInt {
    pub fn new() -> KeyValuePairIntInt {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KeyValuePairIntInt| { &m.key },
            |m: &mut KeyValuePairIntInt| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &KeyValuePairIntInt| { &m.value },
            |m: &mut KeyValuePairIntInt| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValuePairIntInt>(
            "KeyValuePairIntInt",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyValuePairIntInt {
    const NAME: &'static str = "KeyValuePairIntInt";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.key = is.read_uint32()?;
                },
                16 => {
                    self.value = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.key != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.key);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.key != 0 {
            os.write_uint32(1, self.key)?;
        }
        if self.value != 0 {
            os.write_uint32(2, self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyValuePairIntInt {
        KeyValuePairIntInt::new()
    }

    fn clear(&mut self) {
        self.key = 0;
        self.value = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyValuePairIntInt {
        static instance: KeyValuePairIntInt = KeyValuePairIntInt {
            key: 0,
            value: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyValuePairIntInt {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyValuePairIntInt").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyValuePairIntInt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValuePairIntInt {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.DataPairUint64_2)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataPairUint64_2 {
    // message fields
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_2.value1)
    pub value1: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_2.value2)
    pub value2: u64,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.DataPairUint64_2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataPairUint64_2 {
    fn default() -> &'a DataPairUint64_2 {
        <DataPairUint64_2 as ::protobuf::Message>::default_instance()
    }
}

impl DataPairUint64_2 {
    pub fn new() -> DataPairUint64_2 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value1",
            |m: &DataPairUint64_2| { &m.value1 },
            |m: &mut DataPairUint64_2| { &mut m.value1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value2",
            |m: &DataPairUint64_2| { &m.value2 },
            |m: &mut DataPairUint64_2| { &mut m.value2 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataPairUint64_2>(
            "DataPairUint64_2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataPairUint64_2 {
    const NAME: &'static str = "DataPairUint64_2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value1 = is.read_uint64()?;
                },
                16 => {
                    self.value2 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value1 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.value1);
        }
        if self.value2 != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value2);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value1 != 0 {
            os.write_uint64(1, self.value1)?;
        }
        if self.value2 != 0 {
            os.write_uint64(2, self.value2)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataPairUint64_2 {
        DataPairUint64_2::new()
    }

    fn clear(&mut self) {
        self.value1 = 0;
        self.value2 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataPairUint64_2 {
        static instance: DataPairUint64_2 = DataPairUint64_2 {
            value1: 0,
            value2: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataPairUint64_2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataPairUint64_2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataPairUint64_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataPairUint64_2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.DataPairUint64_3)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataPairUint64_3 {
    // message fields
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_3.value1)
    pub value1: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_3.value2)
    pub value2: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_3.value3)
    pub value3: u64,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.DataPairUint64_3.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataPairUint64_3 {
    fn default() -> &'a DataPairUint64_3 {
        <DataPairUint64_3 as ::protobuf::Message>::default_instance()
    }
}

impl DataPairUint64_3 {
    pub fn new() -> DataPairUint64_3 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value1",
            |m: &DataPairUint64_3| { &m.value1 },
            |m: &mut DataPairUint64_3| { &mut m.value1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value2",
            |m: &DataPairUint64_3| { &m.value2 },
            |m: &mut DataPairUint64_3| { &mut m.value2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value3",
            |m: &DataPairUint64_3| { &m.value3 },
            |m: &mut DataPairUint64_3| { &mut m.value3 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataPairUint64_3>(
            "DataPairUint64_3",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataPairUint64_3 {
    const NAME: &'static str = "DataPairUint64_3";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value1 = is.read_uint64()?;
                },
                16 => {
                    self.value2 = is.read_uint64()?;
                },
                24 => {
                    self.value3 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value1 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.value1);
        }
        if self.value2 != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value2);
        }
        if self.value3 != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.value3);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value1 != 0 {
            os.write_uint64(1, self.value1)?;
        }
        if self.value2 != 0 {
            os.write_uint64(2, self.value2)?;
        }
        if self.value3 != 0 {
            os.write_uint64(3, self.value3)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataPairUint64_3 {
        DataPairUint64_3::new()
    }

    fn clear(&mut self) {
        self.value1 = 0;
        self.value2 = 0;
        self.value3 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataPairUint64_3 {
        static instance: DataPairUint64_3 = DataPairUint64_3 {
            value1: 0,
            value2: 0,
            value3: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataPairUint64_3 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataPairUint64_3").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataPairUint64_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataPairUint64_3 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.DataPairUint64_4)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataPairUint64_4 {
    // message fields
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_4.value1)
    pub value1: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_4.value2)
    pub value2: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_4.value3)
    pub value3: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_4.value4)
    pub value4: u64,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.DataPairUint64_4.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataPairUint64_4 {
    fn default() -> &'a DataPairUint64_4 {
        <DataPairUint64_4 as ::protobuf::Message>::default_instance()
    }
}

impl DataPairUint64_4 {
    pub fn new() -> DataPairUint64_4 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value1",
            |m: &DataPairUint64_4| { &m.value1 },
            |m: &mut DataPairUint64_4| { &mut m.value1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value2",
            |m: &DataPairUint64_4| { &m.value2 },
            |m: &mut DataPairUint64_4| { &mut m.value2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value3",
            |m: &DataPairUint64_4| { &m.value3 },
            |m: &mut DataPairUint64_4| { &mut m.value3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value4",
            |m: &DataPairUint64_4| { &m.value4 },
            |m: &mut DataPairUint64_4| { &mut m.value4 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataPairUint64_4>(
            "DataPairUint64_4",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataPairUint64_4 {
    const NAME: &'static str = "DataPairUint64_4";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value1 = is.read_uint64()?;
                },
                16 => {
                    self.value2 = is.read_uint64()?;
                },
                24 => {
                    self.value3 = is.read_uint64()?;
                },
                32 => {
                    self.value4 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value1 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.value1);
        }
        if self.value2 != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value2);
        }
        if self.value3 != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.value3);
        }
        if self.value4 != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.value4);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value1 != 0 {
            os.write_uint64(1, self.value1)?;
        }
        if self.value2 != 0 {
            os.write_uint64(2, self.value2)?;
        }
        if self.value3 != 0 {
            os.write_uint64(3, self.value3)?;
        }
        if self.value4 != 0 {
            os.write_uint64(4, self.value4)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataPairUint64_4 {
        DataPairUint64_4::new()
    }

    fn clear(&mut self) {
        self.value1 = 0;
        self.value2 = 0;
        self.value3 = 0;
        self.value4 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataPairUint64_4 {
        static instance: DataPairUint64_4 = DataPairUint64_4 {
            value1: 0,
            value2: 0,
            value3: 0,
            value4: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataPairUint64_4 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataPairUint64_4").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataPairUint64_4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataPairUint64_4 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.DataPairUint64_5)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataPairUint64_5 {
    // message fields
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_5.value1)
    pub value1: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_5.value2)
    pub value2: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_5.value3)
    pub value3: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_5.value4)
    pub value4: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_5.value5)
    pub value5: u64,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.DataPairUint64_5.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataPairUint64_5 {
    fn default() -> &'a DataPairUint64_5 {
        <DataPairUint64_5 as ::protobuf::Message>::default_instance()
    }
}

impl DataPairUint64_5 {
    pub fn new() -> DataPairUint64_5 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value1",
            |m: &DataPairUint64_5| { &m.value1 },
            |m: &mut DataPairUint64_5| { &mut m.value1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value2",
            |m: &DataPairUint64_5| { &m.value2 },
            |m: &mut DataPairUint64_5| { &mut m.value2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value3",
            |m: &DataPairUint64_5| { &m.value3 },
            |m: &mut DataPairUint64_5| { &mut m.value3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value4",
            |m: &DataPairUint64_5| { &m.value4 },
            |m: &mut DataPairUint64_5| { &mut m.value4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value5",
            |m: &DataPairUint64_5| { &m.value5 },
            |m: &mut DataPairUint64_5| { &mut m.value5 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataPairUint64_5>(
            "DataPairUint64_5",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataPairUint64_5 {
    const NAME: &'static str = "DataPairUint64_5";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value1 = is.read_uint64()?;
                },
                16 => {
                    self.value2 = is.read_uint64()?;
                },
                24 => {
                    self.value3 = is.read_uint64()?;
                },
                32 => {
                    self.value4 = is.read_uint64()?;
                },
                40 => {
                    self.value5 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value1 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.value1);
        }
        if self.value2 != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value2);
        }
        if self.value3 != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.value3);
        }
        if self.value4 != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.value4);
        }
        if self.value5 != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.value5);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value1 != 0 {
            os.write_uint64(1, self.value1)?;
        }
        if self.value2 != 0 {
            os.write_uint64(2, self.value2)?;
        }
        if self.value3 != 0 {
            os.write_uint64(3, self.value3)?;
        }
        if self.value4 != 0 {
            os.write_uint64(4, self.value4)?;
        }
        if self.value5 != 0 {
            os.write_uint64(5, self.value5)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataPairUint64_5 {
        DataPairUint64_5::new()
    }

    fn clear(&mut self) {
        self.value1 = 0;
        self.value2 = 0;
        self.value3 = 0;
        self.value4 = 0;
        self.value5 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataPairUint64_5 {
        static instance: DataPairUint64_5 = DataPairUint64_5 {
            value1: 0,
            value2: 0,
            value3: 0,
            value4: 0,
            value5: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataPairUint64_5 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataPairUint64_5").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataPairUint64_5 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataPairUint64_5 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.DataPairUint64_6)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataPairUint64_6 {
    // message fields
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_6.value1)
    pub value1: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_6.value2)
    pub value2: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_6.value3)
    pub value3: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_6.value4)
    pub value4: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_6.value5)
    pub value5: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_6.value6)
    pub value6: u64,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.DataPairUint64_6.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataPairUint64_6 {
    fn default() -> &'a DataPairUint64_6 {
        <DataPairUint64_6 as ::protobuf::Message>::default_instance()
    }
}

impl DataPairUint64_6 {
    pub fn new() -> DataPairUint64_6 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value1",
            |m: &DataPairUint64_6| { &m.value1 },
            |m: &mut DataPairUint64_6| { &mut m.value1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value2",
            |m: &DataPairUint64_6| { &m.value2 },
            |m: &mut DataPairUint64_6| { &mut m.value2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value3",
            |m: &DataPairUint64_6| { &m.value3 },
            |m: &mut DataPairUint64_6| { &mut m.value3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value4",
            |m: &DataPairUint64_6| { &m.value4 },
            |m: &mut DataPairUint64_6| { &mut m.value4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value5",
            |m: &DataPairUint64_6| { &m.value5 },
            |m: &mut DataPairUint64_6| { &mut m.value5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value6",
            |m: &DataPairUint64_6| { &m.value6 },
            |m: &mut DataPairUint64_6| { &mut m.value6 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataPairUint64_6>(
            "DataPairUint64_6",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataPairUint64_6 {
    const NAME: &'static str = "DataPairUint64_6";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value1 = is.read_uint64()?;
                },
                16 => {
                    self.value2 = is.read_uint64()?;
                },
                24 => {
                    self.value3 = is.read_uint64()?;
                },
                32 => {
                    self.value4 = is.read_uint64()?;
                },
                40 => {
                    self.value5 = is.read_uint64()?;
                },
                48 => {
                    self.value6 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value1 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.value1);
        }
        if self.value2 != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value2);
        }
        if self.value3 != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.value3);
        }
        if self.value4 != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.value4);
        }
        if self.value5 != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.value5);
        }
        if self.value6 != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.value6);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value1 != 0 {
            os.write_uint64(1, self.value1)?;
        }
        if self.value2 != 0 {
            os.write_uint64(2, self.value2)?;
        }
        if self.value3 != 0 {
            os.write_uint64(3, self.value3)?;
        }
        if self.value4 != 0 {
            os.write_uint64(4, self.value4)?;
        }
        if self.value5 != 0 {
            os.write_uint64(5, self.value5)?;
        }
        if self.value6 != 0 {
            os.write_uint64(6, self.value6)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataPairUint64_6 {
        DataPairUint64_6::new()
    }

    fn clear(&mut self) {
        self.value1 = 0;
        self.value2 = 0;
        self.value3 = 0;
        self.value4 = 0;
        self.value5 = 0;
        self.value6 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataPairUint64_6 {
        static instance: DataPairUint64_6 = DataPairUint64_6 {
            value1: 0,
            value2: 0,
            value3: 0,
            value4: 0,
            value5: 0,
            value6: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataPairUint64_6 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataPairUint64_6").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataPairUint64_6 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataPairUint64_6 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.DataPairUint64_7)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataPairUint64_7 {
    // message fields
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_7.value1)
    pub value1: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_7.value2)
    pub value2: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_7.value3)
    pub value3: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_7.value4)
    pub value4: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_7.value5)
    pub value5: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_7.value6)
    pub value6: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_7.value7)
    pub value7: u64,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.DataPairUint64_7.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataPairUint64_7 {
    fn default() -> &'a DataPairUint64_7 {
        <DataPairUint64_7 as ::protobuf::Message>::default_instance()
    }
}

impl DataPairUint64_7 {
    pub fn new() -> DataPairUint64_7 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value1",
            |m: &DataPairUint64_7| { &m.value1 },
            |m: &mut DataPairUint64_7| { &mut m.value1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value2",
            |m: &DataPairUint64_7| { &m.value2 },
            |m: &mut DataPairUint64_7| { &mut m.value2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value3",
            |m: &DataPairUint64_7| { &m.value3 },
            |m: &mut DataPairUint64_7| { &mut m.value3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value4",
            |m: &DataPairUint64_7| { &m.value4 },
            |m: &mut DataPairUint64_7| { &mut m.value4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value5",
            |m: &DataPairUint64_7| { &m.value5 },
            |m: &mut DataPairUint64_7| { &mut m.value5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value6",
            |m: &DataPairUint64_7| { &m.value6 },
            |m: &mut DataPairUint64_7| { &mut m.value6 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value7",
            |m: &DataPairUint64_7| { &m.value7 },
            |m: &mut DataPairUint64_7| { &mut m.value7 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataPairUint64_7>(
            "DataPairUint64_7",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataPairUint64_7 {
    const NAME: &'static str = "DataPairUint64_7";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value1 = is.read_uint64()?;
                },
                16 => {
                    self.value2 = is.read_uint64()?;
                },
                24 => {
                    self.value3 = is.read_uint64()?;
                },
                32 => {
                    self.value4 = is.read_uint64()?;
                },
                40 => {
                    self.value5 = is.read_uint64()?;
                },
                48 => {
                    self.value6 = is.read_uint64()?;
                },
                56 => {
                    self.value7 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value1 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.value1);
        }
        if self.value2 != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value2);
        }
        if self.value3 != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.value3);
        }
        if self.value4 != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.value4);
        }
        if self.value5 != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.value5);
        }
        if self.value6 != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.value6);
        }
        if self.value7 != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.value7);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value1 != 0 {
            os.write_uint64(1, self.value1)?;
        }
        if self.value2 != 0 {
            os.write_uint64(2, self.value2)?;
        }
        if self.value3 != 0 {
            os.write_uint64(3, self.value3)?;
        }
        if self.value4 != 0 {
            os.write_uint64(4, self.value4)?;
        }
        if self.value5 != 0 {
            os.write_uint64(5, self.value5)?;
        }
        if self.value6 != 0 {
            os.write_uint64(6, self.value6)?;
        }
        if self.value7 != 0 {
            os.write_uint64(7, self.value7)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataPairUint64_7 {
        DataPairUint64_7::new()
    }

    fn clear(&mut self) {
        self.value1 = 0;
        self.value2 = 0;
        self.value3 = 0;
        self.value4 = 0;
        self.value5 = 0;
        self.value6 = 0;
        self.value7 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataPairUint64_7 {
        static instance: DataPairUint64_7 = DataPairUint64_7 {
            value1: 0,
            value2: 0,
            value3: 0,
            value4: 0,
            value5: 0,
            value6: 0,
            value7: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataPairUint64_7 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataPairUint64_7").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataPairUint64_7 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataPairUint64_7 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.DataPairUint64_8)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataPairUint64_8 {
    // message fields
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_8.value1)
    pub value1: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_8.value2)
    pub value2: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_8.value3)
    pub value3: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_8.value4)
    pub value4: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_8.value5)
    pub value5: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_8.value6)
    pub value6: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_8.value7)
    pub value7: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_8.value8)
    pub value8: u64,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.DataPairUint64_8.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataPairUint64_8 {
    fn default() -> &'a DataPairUint64_8 {
        <DataPairUint64_8 as ::protobuf::Message>::default_instance()
    }
}

impl DataPairUint64_8 {
    pub fn new() -> DataPairUint64_8 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value1",
            |m: &DataPairUint64_8| { &m.value1 },
            |m: &mut DataPairUint64_8| { &mut m.value1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value2",
            |m: &DataPairUint64_8| { &m.value2 },
            |m: &mut DataPairUint64_8| { &mut m.value2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value3",
            |m: &DataPairUint64_8| { &m.value3 },
            |m: &mut DataPairUint64_8| { &mut m.value3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value4",
            |m: &DataPairUint64_8| { &m.value4 },
            |m: &mut DataPairUint64_8| { &mut m.value4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value5",
            |m: &DataPairUint64_8| { &m.value5 },
            |m: &mut DataPairUint64_8| { &mut m.value5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value6",
            |m: &DataPairUint64_8| { &m.value6 },
            |m: &mut DataPairUint64_8| { &mut m.value6 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value7",
            |m: &DataPairUint64_8| { &m.value7 },
            |m: &mut DataPairUint64_8| { &mut m.value7 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value8",
            |m: &DataPairUint64_8| { &m.value8 },
            |m: &mut DataPairUint64_8| { &mut m.value8 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataPairUint64_8>(
            "DataPairUint64_8",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataPairUint64_8 {
    const NAME: &'static str = "DataPairUint64_8";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value1 = is.read_uint64()?;
                },
                16 => {
                    self.value2 = is.read_uint64()?;
                },
                24 => {
                    self.value3 = is.read_uint64()?;
                },
                32 => {
                    self.value4 = is.read_uint64()?;
                },
                40 => {
                    self.value5 = is.read_uint64()?;
                },
                48 => {
                    self.value6 = is.read_uint64()?;
                },
                56 => {
                    self.value7 = is.read_uint64()?;
                },
                64 => {
                    self.value8 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value1 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.value1);
        }
        if self.value2 != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value2);
        }
        if self.value3 != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.value3);
        }
        if self.value4 != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.value4);
        }
        if self.value5 != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.value5);
        }
        if self.value6 != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.value6);
        }
        if self.value7 != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.value7);
        }
        if self.value8 != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.value8);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value1 != 0 {
            os.write_uint64(1, self.value1)?;
        }
        if self.value2 != 0 {
            os.write_uint64(2, self.value2)?;
        }
        if self.value3 != 0 {
            os.write_uint64(3, self.value3)?;
        }
        if self.value4 != 0 {
            os.write_uint64(4, self.value4)?;
        }
        if self.value5 != 0 {
            os.write_uint64(5, self.value5)?;
        }
        if self.value6 != 0 {
            os.write_uint64(6, self.value6)?;
        }
        if self.value7 != 0 {
            os.write_uint64(7, self.value7)?;
        }
        if self.value8 != 0 {
            os.write_uint64(8, self.value8)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataPairUint64_8 {
        DataPairUint64_8::new()
    }

    fn clear(&mut self) {
        self.value1 = 0;
        self.value2 = 0;
        self.value3 = 0;
        self.value4 = 0;
        self.value5 = 0;
        self.value6 = 0;
        self.value7 = 0;
        self.value8 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataPairUint64_8 {
        static instance: DataPairUint64_8 = DataPairUint64_8 {
            value1: 0,
            value2: 0,
            value3: 0,
            value4: 0,
            value5: 0,
            value6: 0,
            value7: 0,
            value8: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataPairUint64_8 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataPairUint64_8").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataPairUint64_8 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataPairUint64_8 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.DataPairUint64_9)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataPairUint64_9 {
    // message fields
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_9.value1)
    pub value1: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_9.value2)
    pub value2: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_9.value3)
    pub value3: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_9.value4)
    pub value4: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_9.value5)
    pub value5: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_9.value6)
    pub value6: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_9.value7)
    pub value7: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_9.value8)
    pub value8: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_9.value9)
    pub value9: u64,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.DataPairUint64_9.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataPairUint64_9 {
    fn default() -> &'a DataPairUint64_9 {
        <DataPairUint64_9 as ::protobuf::Message>::default_instance()
    }
}

impl DataPairUint64_9 {
    pub fn new() -> DataPairUint64_9 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value1",
            |m: &DataPairUint64_9| { &m.value1 },
            |m: &mut DataPairUint64_9| { &mut m.value1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value2",
            |m: &DataPairUint64_9| { &m.value2 },
            |m: &mut DataPairUint64_9| { &mut m.value2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value3",
            |m: &DataPairUint64_9| { &m.value3 },
            |m: &mut DataPairUint64_9| { &mut m.value3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value4",
            |m: &DataPairUint64_9| { &m.value4 },
            |m: &mut DataPairUint64_9| { &mut m.value4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value5",
            |m: &DataPairUint64_9| { &m.value5 },
            |m: &mut DataPairUint64_9| { &mut m.value5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value6",
            |m: &DataPairUint64_9| { &m.value6 },
            |m: &mut DataPairUint64_9| { &mut m.value6 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value7",
            |m: &DataPairUint64_9| { &m.value7 },
            |m: &mut DataPairUint64_9| { &mut m.value7 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value8",
            |m: &DataPairUint64_9| { &m.value8 },
            |m: &mut DataPairUint64_9| { &mut m.value8 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value9",
            |m: &DataPairUint64_9| { &m.value9 },
            |m: &mut DataPairUint64_9| { &mut m.value9 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataPairUint64_9>(
            "DataPairUint64_9",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataPairUint64_9 {
    const NAME: &'static str = "DataPairUint64_9";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value1 = is.read_uint64()?;
                },
                16 => {
                    self.value2 = is.read_uint64()?;
                },
                24 => {
                    self.value3 = is.read_uint64()?;
                },
                32 => {
                    self.value4 = is.read_uint64()?;
                },
                40 => {
                    self.value5 = is.read_uint64()?;
                },
                48 => {
                    self.value6 = is.read_uint64()?;
                },
                56 => {
                    self.value7 = is.read_uint64()?;
                },
                64 => {
                    self.value8 = is.read_uint64()?;
                },
                72 => {
                    self.value9 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value1 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.value1);
        }
        if self.value2 != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value2);
        }
        if self.value3 != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.value3);
        }
        if self.value4 != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.value4);
        }
        if self.value5 != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.value5);
        }
        if self.value6 != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.value6);
        }
        if self.value7 != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.value7);
        }
        if self.value8 != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.value8);
        }
        if self.value9 != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.value9);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value1 != 0 {
            os.write_uint64(1, self.value1)?;
        }
        if self.value2 != 0 {
            os.write_uint64(2, self.value2)?;
        }
        if self.value3 != 0 {
            os.write_uint64(3, self.value3)?;
        }
        if self.value4 != 0 {
            os.write_uint64(4, self.value4)?;
        }
        if self.value5 != 0 {
            os.write_uint64(5, self.value5)?;
        }
        if self.value6 != 0 {
            os.write_uint64(6, self.value6)?;
        }
        if self.value7 != 0 {
            os.write_uint64(7, self.value7)?;
        }
        if self.value8 != 0 {
            os.write_uint64(8, self.value8)?;
        }
        if self.value9 != 0 {
            os.write_uint64(9, self.value9)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataPairUint64_9 {
        DataPairUint64_9::new()
    }

    fn clear(&mut self) {
        self.value1 = 0;
        self.value2 = 0;
        self.value3 = 0;
        self.value4 = 0;
        self.value5 = 0;
        self.value6 = 0;
        self.value7 = 0;
        self.value8 = 0;
        self.value9 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataPairUint64_9 {
        static instance: DataPairUint64_9 = DataPairUint64_9 {
            value1: 0,
            value2: 0,
            value3: 0,
            value4: 0,
            value5: 0,
            value6: 0,
            value7: 0,
            value8: 0,
            value9: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataPairUint64_9 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataPairUint64_9").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataPairUint64_9 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataPairUint64_9 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.DataPairUint64_10)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataPairUint64_10 {
    // message fields
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_10.value1)
    pub value1: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_10.value2)
    pub value2: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_10.value3)
    pub value3: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_10.value4)
    pub value4: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_10.value5)
    pub value5: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_10.value6)
    pub value6: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_10.value7)
    pub value7: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_10.value8)
    pub value8: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_10.value9)
    pub value9: u64,
    // @@protoc_insertion_point(field:pbdef.DataPairUint64_10.value10)
    pub value10: u64,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.DataPairUint64_10.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataPairUint64_10 {
    fn default() -> &'a DataPairUint64_10 {
        <DataPairUint64_10 as ::protobuf::Message>::default_instance()
    }
}

impl DataPairUint64_10 {
    pub fn new() -> DataPairUint64_10 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value1",
            |m: &DataPairUint64_10| { &m.value1 },
            |m: &mut DataPairUint64_10| { &mut m.value1 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value2",
            |m: &DataPairUint64_10| { &m.value2 },
            |m: &mut DataPairUint64_10| { &mut m.value2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value3",
            |m: &DataPairUint64_10| { &m.value3 },
            |m: &mut DataPairUint64_10| { &mut m.value3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value4",
            |m: &DataPairUint64_10| { &m.value4 },
            |m: &mut DataPairUint64_10| { &mut m.value4 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value5",
            |m: &DataPairUint64_10| { &m.value5 },
            |m: &mut DataPairUint64_10| { &mut m.value5 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value6",
            |m: &DataPairUint64_10| { &m.value6 },
            |m: &mut DataPairUint64_10| { &mut m.value6 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value7",
            |m: &DataPairUint64_10| { &m.value7 },
            |m: &mut DataPairUint64_10| { &mut m.value7 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value8",
            |m: &DataPairUint64_10| { &m.value8 },
            |m: &mut DataPairUint64_10| { &mut m.value8 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value9",
            |m: &DataPairUint64_10| { &m.value9 },
            |m: &mut DataPairUint64_10| { &mut m.value9 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value10",
            |m: &DataPairUint64_10| { &m.value10 },
            |m: &mut DataPairUint64_10| { &mut m.value10 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataPairUint64_10>(
            "DataPairUint64_10",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataPairUint64_10 {
    const NAME: &'static str = "DataPairUint64_10";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value1 = is.read_uint64()?;
                },
                16 => {
                    self.value2 = is.read_uint64()?;
                },
                24 => {
                    self.value3 = is.read_uint64()?;
                },
                32 => {
                    self.value4 = is.read_uint64()?;
                },
                40 => {
                    self.value5 = is.read_uint64()?;
                },
                48 => {
                    self.value6 = is.read_uint64()?;
                },
                56 => {
                    self.value7 = is.read_uint64()?;
                },
                64 => {
                    self.value8 = is.read_uint64()?;
                },
                72 => {
                    self.value9 = is.read_uint64()?;
                },
                80 => {
                    self.value10 = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.value1 != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.value1);
        }
        if self.value2 != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value2);
        }
        if self.value3 != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.value3);
        }
        if self.value4 != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.value4);
        }
        if self.value5 != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.value5);
        }
        if self.value6 != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.value6);
        }
        if self.value7 != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.value7);
        }
        if self.value8 != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.value8);
        }
        if self.value9 != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.value9);
        }
        if self.value10 != 0 {
            my_size += ::protobuf::rt::uint64_size(10, self.value10);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.value1 != 0 {
            os.write_uint64(1, self.value1)?;
        }
        if self.value2 != 0 {
            os.write_uint64(2, self.value2)?;
        }
        if self.value3 != 0 {
            os.write_uint64(3, self.value3)?;
        }
        if self.value4 != 0 {
            os.write_uint64(4, self.value4)?;
        }
        if self.value5 != 0 {
            os.write_uint64(5, self.value5)?;
        }
        if self.value6 != 0 {
            os.write_uint64(6, self.value6)?;
        }
        if self.value7 != 0 {
            os.write_uint64(7, self.value7)?;
        }
        if self.value8 != 0 {
            os.write_uint64(8, self.value8)?;
        }
        if self.value9 != 0 {
            os.write_uint64(9, self.value9)?;
        }
        if self.value10 != 0 {
            os.write_uint64(10, self.value10)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataPairUint64_10 {
        DataPairUint64_10::new()
    }

    fn clear(&mut self) {
        self.value1 = 0;
        self.value2 = 0;
        self.value3 = 0;
        self.value4 = 0;
        self.value5 = 0;
        self.value6 = 0;
        self.value7 = 0;
        self.value8 = 0;
        self.value9 = 0;
        self.value10 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataPairUint64_10 {
        static instance: DataPairUint64_10 = DataPairUint64_10 {
            value1: 0,
            value2: 0,
            value3: 0,
            value4: 0,
            value5: 0,
            value6: 0,
            value7: 0,
            value8: 0,
            value9: 0,
            value10: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataPairUint64_10 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataPairUint64_10").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataPairUint64_10 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataPairUint64_10 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.KeyValuePairStringString)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyValuePairStringString {
    // message fields
    // @@protoc_insertion_point(field:pbdef.KeyValuePairStringString.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:pbdef.KeyValuePairStringString.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.KeyValuePairStringString.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyValuePairStringString {
    fn default() -> &'a KeyValuePairStringString {
        <KeyValuePairStringString as ::protobuf::Message>::default_instance()
    }
}

impl KeyValuePairStringString {
    pub fn new() -> KeyValuePairStringString {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KeyValuePairStringString| { &m.key },
            |m: &mut KeyValuePairStringString| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &KeyValuePairStringString| { &m.value },
            |m: &mut KeyValuePairStringString| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValuePairStringString>(
            "KeyValuePairStringString",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyValuePairStringString {
    const NAME: &'static str = "KeyValuePairStringString";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                18 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyValuePairStringString {
        KeyValuePairStringString::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyValuePairStringString {
        static instance: KeyValuePairStringString = KeyValuePairStringString {
            key: ::std::string::String::new(),
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyValuePairStringString {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyValuePairStringString").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyValuePairStringString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValuePairStringString {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.KeyValuePairStringInt)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyValuePairStringInt {
    // message fields
    // @@protoc_insertion_point(field:pbdef.KeyValuePairStringInt.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:pbdef.KeyValuePairStringInt.value)
    pub value: u32,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.KeyValuePairStringInt.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyValuePairStringInt {
    fn default() -> &'a KeyValuePairStringInt {
        <KeyValuePairStringInt as ::protobuf::Message>::default_instance()
    }
}

impl KeyValuePairStringInt {
    pub fn new() -> KeyValuePairStringInt {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KeyValuePairStringInt| { &m.key },
            |m: &mut KeyValuePairStringInt| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &KeyValuePairStringInt| { &m.value },
            |m: &mut KeyValuePairStringInt| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValuePairStringInt>(
            "KeyValuePairStringInt",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyValuePairStringInt {
    const NAME: &'static str = "KeyValuePairStringInt";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                16 => {
                    self.value = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if self.value != 0 {
            os.write_uint32(2, self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyValuePairStringInt {
        KeyValuePairStringInt::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyValuePairStringInt {
        static instance: KeyValuePairStringInt = KeyValuePairStringInt {
            key: ::std::string::String::new(),
            value: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyValuePairStringInt {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyValuePairStringInt").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyValuePairStringInt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValuePairStringInt {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.KeyValuePairIntString)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyValuePairIntString {
    // message fields
    // @@protoc_insertion_point(field:pbdef.KeyValuePairIntString.key)
    pub key: u32,
    // @@protoc_insertion_point(field:pbdef.KeyValuePairIntString.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.KeyValuePairIntString.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyValuePairIntString {
    fn default() -> &'a KeyValuePairIntString {
        <KeyValuePairIntString as ::protobuf::Message>::default_instance()
    }
}

impl KeyValuePairIntString {
    pub fn new() -> KeyValuePairIntString {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KeyValuePairIntString| { &m.key },
            |m: &mut KeyValuePairIntString| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &KeyValuePairIntString| { &m.value },
            |m: &mut KeyValuePairIntString| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValuePairIntString>(
            "KeyValuePairIntString",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyValuePairIntString {
    const NAME: &'static str = "KeyValuePairIntString";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.key = is.read_uint32()?;
                },
                18 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.key != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.key != 0 {
            os.write_uint32(1, self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyValuePairIntString {
        KeyValuePairIntString::new()
    }

    fn clear(&mut self) {
        self.key = 0;
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyValuePairIntString {
        static instance: KeyValuePairIntString = KeyValuePairIntString {
            key: 0,
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyValuePairIntString {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyValuePairIntString").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyValuePairIntString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValuePairIntString {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.KeyValuePairStringLong)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyValuePairStringLong {
    // message fields
    // @@protoc_insertion_point(field:pbdef.KeyValuePairStringLong.key)
    pub key: ::std::string::String,
    // @@protoc_insertion_point(field:pbdef.KeyValuePairStringLong.value)
    pub value: u64,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.KeyValuePairStringLong.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyValuePairStringLong {
    fn default() -> &'a KeyValuePairStringLong {
        <KeyValuePairStringLong as ::protobuf::Message>::default_instance()
    }
}

impl KeyValuePairStringLong {
    pub fn new() -> KeyValuePairStringLong {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KeyValuePairStringLong| { &m.key },
            |m: &mut KeyValuePairStringLong| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &KeyValuePairStringLong| { &m.value },
            |m: &mut KeyValuePairStringLong| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValuePairStringLong>(
            "KeyValuePairStringLong",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyValuePairStringLong {
    const NAME: &'static str = "KeyValuePairStringLong";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_string()?;
                },
                16 => {
                    self.value = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if self.value != 0 {
            os.write_uint64(2, self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyValuePairStringLong {
        KeyValuePairStringLong::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyValuePairStringLong {
        static instance: KeyValuePairStringLong = KeyValuePairStringLong {
            key: ::std::string::String::new(),
            value: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyValuePairStringLong {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyValuePairStringLong").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyValuePairStringLong {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValuePairStringLong {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.KeyValuePairLongString)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyValuePairLongString {
    // message fields
    // @@protoc_insertion_point(field:pbdef.KeyValuePairLongString.key)
    pub key: u64,
    // @@protoc_insertion_point(field:pbdef.KeyValuePairLongString.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.KeyValuePairLongString.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyValuePairLongString {
    fn default() -> &'a KeyValuePairLongString {
        <KeyValuePairLongString as ::protobuf::Message>::default_instance()
    }
}

impl KeyValuePairLongString {
    pub fn new() -> KeyValuePairLongString {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KeyValuePairLongString| { &m.key },
            |m: &mut KeyValuePairLongString| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &KeyValuePairLongString| { &m.value },
            |m: &mut KeyValuePairLongString| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeyValuePairLongString>(
            "KeyValuePairLongString",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeyValuePairLongString {
    const NAME: &'static str = "KeyValuePairLongString";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.key = is.read_uint64()?;
                },
                18 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.key != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.key != 0 {
            os.write_uint64(1, self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyValuePairLongString {
        KeyValuePairLongString::new()
    }

    fn clear(&mut self) {
        self.key = 0;
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyValuePairLongString {
        static instance: KeyValuePairLongString = KeyValuePairLongString {
            key: 0,
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeyValuePairLongString {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeyValuePairLongString").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeyValuePairLongString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyValuePairLongString {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:pbdef.LANGUAGE_TYPE)
pub enum LANGUAGE_TYPE {
    // @@protoc_insertion_point(enum_value:pbdef.LANGUAGE_TYPE.LANGUAGE_NONE)
    LANGUAGE_NONE = 0,
    // @@protoc_insertion_point(enum_value:pbdef.LANGUAGE_TYPE.LANGUAGE_ENGLISH)
    LANGUAGE_ENGLISH = 1,
    // @@protoc_insertion_point(enum_value:pbdef.LANGUAGE_TYPE.LANGUAGE_CHINESE)
    LANGUAGE_CHINESE = 2,
    // @@protoc_insertion_point(enum_value:pbdef.LANGUAGE_TYPE.LANGUAGE_CHINESE_TRADITIONAL)
    LANGUAGE_CHINESE_TRADITIONAL = 3,
}

impl ::protobuf::Enum for LANGUAGE_TYPE {
    const NAME: &'static str = "LANGUAGE_TYPE";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LANGUAGE_TYPE> {
        match value {
            0 => ::std::option::Option::Some(LANGUAGE_TYPE::LANGUAGE_NONE),
            1 => ::std::option::Option::Some(LANGUAGE_TYPE::LANGUAGE_ENGLISH),
            2 => ::std::option::Option::Some(LANGUAGE_TYPE::LANGUAGE_CHINESE),
            3 => ::std::option::Option::Some(LANGUAGE_TYPE::LANGUAGE_CHINESE_TRADITIONAL),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<LANGUAGE_TYPE> {
        match str {
            "LANGUAGE_NONE" => ::std::option::Option::Some(LANGUAGE_TYPE::LANGUAGE_NONE),
            "LANGUAGE_ENGLISH" => ::std::option::Option::Some(LANGUAGE_TYPE::LANGUAGE_ENGLISH),
            "LANGUAGE_CHINESE" => ::std::option::Option::Some(LANGUAGE_TYPE::LANGUAGE_CHINESE),
            "LANGUAGE_CHINESE_TRADITIONAL" => ::std::option::Option::Some(LANGUAGE_TYPE::LANGUAGE_CHINESE_TRADITIONAL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [LANGUAGE_TYPE] = &[
        LANGUAGE_TYPE::LANGUAGE_NONE,
        LANGUAGE_TYPE::LANGUAGE_ENGLISH,
        LANGUAGE_TYPE::LANGUAGE_CHINESE,
        LANGUAGE_TYPE::LANGUAGE_CHINESE_TRADITIONAL,
    ];
}

impl ::protobuf::EnumFull for LANGUAGE_TYPE {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("LANGUAGE_TYPE").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for LANGUAGE_TYPE {
    fn default() -> Self {
        LANGUAGE_TYPE::LANGUAGE_NONE
    }
}

impl LANGUAGE_TYPE {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LANGUAGE_TYPE>("LANGUAGE_TYPE")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:pbdef.CHOOSE_SCENE_TYPE)
pub enum CHOOSE_SCENE_TYPE {
    // @@protoc_insertion_point(enum_value:pbdef.CHOOSE_SCENE_TYPE.MY)
    MY = 0,
    // @@protoc_insertion_point(enum_value:pbdef.CHOOSE_SCENE_TYPE.OPEN)
    OPEN = 1,
    // @@protoc_insertion_point(enum_value:pbdef.CHOOSE_SCENE_TYPE.PUBLIC)
    PUBLIC = 2,
    // @@protoc_insertion_point(enum_value:pbdef.CHOOSE_SCENE_TYPE.SUBLET)
    SUBLET = 3,
}

impl ::protobuf::Enum for CHOOSE_SCENE_TYPE {
    const NAME: &'static str = "CHOOSE_SCENE_TYPE";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CHOOSE_SCENE_TYPE> {
        match value {
            0 => ::std::option::Option::Some(CHOOSE_SCENE_TYPE::MY),
            1 => ::std::option::Option::Some(CHOOSE_SCENE_TYPE::OPEN),
            2 => ::std::option::Option::Some(CHOOSE_SCENE_TYPE::PUBLIC),
            3 => ::std::option::Option::Some(CHOOSE_SCENE_TYPE::SUBLET),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<CHOOSE_SCENE_TYPE> {
        match str {
            "MY" => ::std::option::Option::Some(CHOOSE_SCENE_TYPE::MY),
            "OPEN" => ::std::option::Option::Some(CHOOSE_SCENE_TYPE::OPEN),
            "PUBLIC" => ::std::option::Option::Some(CHOOSE_SCENE_TYPE::PUBLIC),
            "SUBLET" => ::std::option::Option::Some(CHOOSE_SCENE_TYPE::SUBLET),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CHOOSE_SCENE_TYPE] = &[
        CHOOSE_SCENE_TYPE::MY,
        CHOOSE_SCENE_TYPE::OPEN,
        CHOOSE_SCENE_TYPE::PUBLIC,
        CHOOSE_SCENE_TYPE::SUBLET,
    ];
}

impl ::protobuf::EnumFull for CHOOSE_SCENE_TYPE {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CHOOSE_SCENE_TYPE").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CHOOSE_SCENE_TYPE {
    fn default() -> Self {
        CHOOSE_SCENE_TYPE::MY
    }
}

impl CHOOSE_SCENE_TYPE {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CHOOSE_SCENE_TYPE>("CHOOSE_SCENE_TYPE")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:pbdef.BUY_SCENE_PAYTYPE)
pub enum BUY_SCENE_PAYTYPE {
    // @@protoc_insertion_point(enum_value:pbdef.BUY_SCENE_PAYTYPE.RMB)
    RMB = 0,
    // @@protoc_insertion_point(enum_value:pbdef.BUY_SCENE_PAYTYPE.JIFEN)
    JIFEN = 1,
}

impl ::protobuf::Enum for BUY_SCENE_PAYTYPE {
    const NAME: &'static str = "BUY_SCENE_PAYTYPE";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BUY_SCENE_PAYTYPE> {
        match value {
            0 => ::std::option::Option::Some(BUY_SCENE_PAYTYPE::RMB),
            1 => ::std::option::Option::Some(BUY_SCENE_PAYTYPE::JIFEN),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<BUY_SCENE_PAYTYPE> {
        match str {
            "RMB" => ::std::option::Option::Some(BUY_SCENE_PAYTYPE::RMB),
            "JIFEN" => ::std::option::Option::Some(BUY_SCENE_PAYTYPE::JIFEN),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [BUY_SCENE_PAYTYPE] = &[
        BUY_SCENE_PAYTYPE::RMB,
        BUY_SCENE_PAYTYPE::JIFEN,
    ];
}

impl ::protobuf::EnumFull for BUY_SCENE_PAYTYPE {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("BUY_SCENE_PAYTYPE").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for BUY_SCENE_PAYTYPE {
    fn default() -> Self {
        BUY_SCENE_PAYTYPE::RMB
    }
}

impl BUY_SCENE_PAYTYPE {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<BUY_SCENE_PAYTYPE>("BUY_SCENE_PAYTYPE")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:pbdef.ENTER_SCENE_POWER)
pub enum ENTER_SCENE_POWER {
    // @@protoc_insertion_point(enum_value:pbdef.ENTER_SCENE_POWER.IS_OPEN)
    IS_OPEN = 0,
    // @@protoc_insertion_point(enum_value:pbdef.ENTER_SCENE_POWER.IS_MYSELF)
    IS_MYSELF = 1,
    // @@protoc_insertion_point(enum_value:pbdef.ENTER_SCENE_POWER.IS_FRIEND)
    IS_FRIEND = 2,
}

impl ::protobuf::Enum for ENTER_SCENE_POWER {
    const NAME: &'static str = "ENTER_SCENE_POWER";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ENTER_SCENE_POWER> {
        match value {
            0 => ::std::option::Option::Some(ENTER_SCENE_POWER::IS_OPEN),
            1 => ::std::option::Option::Some(ENTER_SCENE_POWER::IS_MYSELF),
            2 => ::std::option::Option::Some(ENTER_SCENE_POWER::IS_FRIEND),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ENTER_SCENE_POWER> {
        match str {
            "IS_OPEN" => ::std::option::Option::Some(ENTER_SCENE_POWER::IS_OPEN),
            "IS_MYSELF" => ::std::option::Option::Some(ENTER_SCENE_POWER::IS_MYSELF),
            "IS_FRIEND" => ::std::option::Option::Some(ENTER_SCENE_POWER::IS_FRIEND),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ENTER_SCENE_POWER] = &[
        ENTER_SCENE_POWER::IS_OPEN,
        ENTER_SCENE_POWER::IS_MYSELF,
        ENTER_SCENE_POWER::IS_FRIEND,
    ];
}

impl ::protobuf::EnumFull for ENTER_SCENE_POWER {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ENTER_SCENE_POWER").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ENTER_SCENE_POWER {
    fn default() -> Self {
        ENTER_SCENE_POWER::IS_OPEN
    }
}

impl ENTER_SCENE_POWER {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ENTER_SCENE_POWER>("ENTER_SCENE_POWER")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10BaseDefine.proto\x12\x05pbdef\"7\n!CommonReqRepeatedCarryData_uint\
    32\x12\x12\n\x04data\x18\x01\x20\x03(\rR\x04data\"7\n!CommonReqRepeatedC\
    arryData_uint64\x12\x12\n\x04data\x18\x01\x20\x03(\x04R\x04data\"7\n!Com\
    monReqRepeatedCarryData_string\x12\x12\n\x04data\x18\x01\x20\x03(\tR\x04\
    data\"j\n3CommonReqRepeatedCarryData_KeyValuePairStringString\x123\n\x04\
    data\x18\x01\x20\x03(\x0b2\x1f.pbdef.KeyValuePairStringStringR\x04data\"\
    <\n\x12KeyValuePairIntInt\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\rR\x05value\"B\n\x10DataPairUint64_\
    2\x12\x16\n\x06value1\x18\x01\x20\x01(\x04R\x06value1\x12\x16\n\x06value\
    2\x18\x02\x20\x01(\x04R\x06value2\"Z\n\x10DataPairUint64_3\x12\x16\n\x06\
    value1\x18\x01\x20\x01(\x04R\x06value1\x12\x16\n\x06value2\x18\x02\x20\
    \x01(\x04R\x06value2\x12\x16\n\x06value3\x18\x03\x20\x01(\x04R\x06value3\
    \"r\n\x10DataPairUint64_4\x12\x16\n\x06value1\x18\x01\x20\x01(\x04R\x06v\
    alue1\x12\x16\n\x06value2\x18\x02\x20\x01(\x04R\x06value2\x12\x16\n\x06v\
    alue3\x18\x03\x20\x01(\x04R\x06value3\x12\x16\n\x06value4\x18\x04\x20\
    \x01(\x04R\x06value4\"\x8a\x01\n\x10DataPairUint64_5\x12\x16\n\x06value1\
    \x18\x01\x20\x01(\x04R\x06value1\x12\x16\n\x06value2\x18\x02\x20\x01(\
    \x04R\x06value2\x12\x16\n\x06value3\x18\x03\x20\x01(\x04R\x06value3\x12\
    \x16\n\x06value4\x18\x04\x20\x01(\x04R\x06value4\x12\x16\n\x06value5\x18\
    \x05\x20\x01(\x04R\x06value5\"\xa2\x01\n\x10DataPairUint64_6\x12\x16\n\
    \x06value1\x18\x01\x20\x01(\x04R\x06value1\x12\x16\n\x06value2\x18\x02\
    \x20\x01(\x04R\x06value2\x12\x16\n\x06value3\x18\x03\x20\x01(\x04R\x06va\
    lue3\x12\x16\n\x06value4\x18\x04\x20\x01(\x04R\x06value4\x12\x16\n\x06va\
    lue5\x18\x05\x20\x01(\x04R\x06value5\x12\x16\n\x06value6\x18\x06\x20\x01\
    (\x04R\x06value6\"\xba\x01\n\x10DataPairUint64_7\x12\x16\n\x06value1\x18\
    \x01\x20\x01(\x04R\x06value1\x12\x16\n\x06value2\x18\x02\x20\x01(\x04R\
    \x06value2\x12\x16\n\x06value3\x18\x03\x20\x01(\x04R\x06value3\x12\x16\n\
    \x06value4\x18\x04\x20\x01(\x04R\x06value4\x12\x16\n\x06value5\x18\x05\
    \x20\x01(\x04R\x06value5\x12\x16\n\x06value6\x18\x06\x20\x01(\x04R\x06va\
    lue6\x12\x16\n\x06value7\x18\x07\x20\x01(\x04R\x06value7\"\xd2\x01\n\x10\
    DataPairUint64_8\x12\x16\n\x06value1\x18\x01\x20\x01(\x04R\x06value1\x12\
    \x16\n\x06value2\x18\x02\x20\x01(\x04R\x06value2\x12\x16\n\x06value3\x18\
    \x03\x20\x01(\x04R\x06value3\x12\x16\n\x06value4\x18\x04\x20\x01(\x04R\
    \x06value4\x12\x16\n\x06value5\x18\x05\x20\x01(\x04R\x06value5\x12\x16\n\
    \x06value6\x18\x06\x20\x01(\x04R\x06value6\x12\x16\n\x06value7\x18\x07\
    \x20\x01(\x04R\x06value7\x12\x16\n\x06value8\x18\x08\x20\x01(\x04R\x06va\
    lue8\"\xea\x01\n\x10DataPairUint64_9\x12\x16\n\x06value1\x18\x01\x20\x01\
    (\x04R\x06value1\x12\x16\n\x06value2\x18\x02\x20\x01(\x04R\x06value2\x12\
    \x16\n\x06value3\x18\x03\x20\x01(\x04R\x06value3\x12\x16\n\x06value4\x18\
    \x04\x20\x01(\x04R\x06value4\x12\x16\n\x06value5\x18\x05\x20\x01(\x04R\
    \x06value5\x12\x16\n\x06value6\x18\x06\x20\x01(\x04R\x06value6\x12\x16\n\
    \x06value7\x18\x07\x20\x01(\x04R\x06value7\x12\x16\n\x06value8\x18\x08\
    \x20\x01(\x04R\x06value8\x12\x16\n\x06value9\x18\t\x20\x01(\x04R\x06valu\
    e9\"\x85\x02\n\x11DataPairUint64_10\x12\x16\n\x06value1\x18\x01\x20\x01(\
    \x04R\x06value1\x12\x16\n\x06value2\x18\x02\x20\x01(\x04R\x06value2\x12\
    \x16\n\x06value3\x18\x03\x20\x01(\x04R\x06value3\x12\x16\n\x06value4\x18\
    \x04\x20\x01(\x04R\x06value4\x12\x16\n\x06value5\x18\x05\x20\x01(\x04R\
    \x06value5\x12\x16\n\x06value6\x18\x06\x20\x01(\x04R\x06value6\x12\x16\n\
    \x06value7\x18\x07\x20\x01(\x04R\x06value7\x12\x16\n\x06value8\x18\x08\
    \x20\x01(\x04R\x06value8\x12\x16\n\x06value9\x18\t\x20\x01(\x04R\x06valu\
    e9\x12\x18\n\x07value10\x18\n\x20\x01(\x04R\x07value10\"B\n\x18KeyValueP\
    airStringString\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value\"?\n\x15KeyValuePairStringInt\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\
    \x01(\rR\x05value\"?\n\x15KeyValuePairIntString\x12\x10\n\x03key\x18\x01\
    \x20\x01(\rR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value\"@\n\
    \x16KeyValuePairStringLong\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\x04R\x05value\"@\n\x16KeyValuePairL\
    ongString\x12\x10\n\x03key\x18\x01\x20\x01(\x04R\x03key\x12\x14\n\x05val\
    ue\x18\x02\x20\x01(\tR\x05value*p\n\rLANGUAGE_TYPE\x12\x11\n\rLANGUAGE_N\
    ONE\x10\0\x12\x14\n\x10LANGUAGE_ENGLISH\x10\x01\x12\x14\n\x10LANGUAGE_CH\
    INESE\x10\x02\x12\x20\n\x1cLANGUAGE_CHINESE_TRADITIONAL\x10\x03*=\n\x11C\
    HOOSE_SCENE_TYPE\x12\x06\n\x02MY\x10\0\x12\x08\n\x04OPEN\x10\x01\x12\n\n\
    \x06PUBLIC\x10\x02\x12\n\n\x06SUBLET\x10\x03*'\n\x11BUY_SCENE_PAYTYPE\
    \x12\x07\n\x03RMB\x10\0\x12\t\n\x05JIFEN\x10\x01*>\n\x11ENTER_SCENE_POWE\
    R\x12\x0b\n\x07IS_OPEN\x10\0\x12\r\n\tIS_MYSELF\x10\x01\x12\r\n\tIS_FRIE\
    ND\x10\x02b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(19);
            messages.push(CommonReqRepeatedCarryData_uint32::generated_message_descriptor_data());
            messages.push(CommonReqRepeatedCarryData_uint64::generated_message_descriptor_data());
            messages.push(CommonReqRepeatedCarryData_string::generated_message_descriptor_data());
            messages.push(CommonReqRepeatedCarryData_KeyValuePairStringString::generated_message_descriptor_data());
            messages.push(KeyValuePairIntInt::generated_message_descriptor_data());
            messages.push(DataPairUint64_2::generated_message_descriptor_data());
            messages.push(DataPairUint64_3::generated_message_descriptor_data());
            messages.push(DataPairUint64_4::generated_message_descriptor_data());
            messages.push(DataPairUint64_5::generated_message_descriptor_data());
            messages.push(DataPairUint64_6::generated_message_descriptor_data());
            messages.push(DataPairUint64_7::generated_message_descriptor_data());
            messages.push(DataPairUint64_8::generated_message_descriptor_data());
            messages.push(DataPairUint64_9::generated_message_descriptor_data());
            messages.push(DataPairUint64_10::generated_message_descriptor_data());
            messages.push(KeyValuePairStringString::generated_message_descriptor_data());
            messages.push(KeyValuePairStringInt::generated_message_descriptor_data());
            messages.push(KeyValuePairIntString::generated_message_descriptor_data());
            messages.push(KeyValuePairStringLong::generated_message_descriptor_data());
            messages.push(KeyValuePairLongString::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(4);
            enums.push(LANGUAGE_TYPE::generated_enum_descriptor_data());
            enums.push(CHOOSE_SCENE_TYPE::generated_enum_descriptor_data());
            enums.push(BUY_SCENE_PAYTYPE::generated_enum_descriptor_data());
            enums.push(ENTER_SCENE_POWER::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
