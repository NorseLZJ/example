// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ErrorCode.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:pbdef.ErrorCode)
pub enum ErrorCode {
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_NONE)
    E_NONE = 0,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_UNKNOWN)
    E_UNKNOWN = 1,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_GAMING_SERVER_SHUTDOWN)
    E_GAMING_SERVER_SHUTDOWN = 2,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_DOES_NOT_LOGIN)
    E_DOES_NOT_LOGIN = 3,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_INVLIAD_REQ)
    E_INVLIAD_REQ = 4,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_TOO_MUCH_REQ)
    E_TOO_MUCH_REQ = 5,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CREATE_REGULATION_FAIL)
    E_CREATE_REGULATION_FAIL = 6,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_STRING_TOO_LONG)
    E_STRING_TOO_LONG = 7,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_DOES_NOT_EXIST)
    E_DOES_NOT_EXIST = 8,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_SERVICE_UNAVAILABLE)
    E_SERVICE_UNAVAILABLE = 9,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_STATUS_ERR)
    E_USER_STATUS_ERR = 10,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_SYSTEM_ERROR)
    E_SYSTEM_ERROR = 100001,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_SYSTEM_SVR_DO_NOT_RESPONSE)
    E_SYSTEM_SVR_DO_NOT_RESPONSE = 100,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_SYSTEM_SVR_LOCK_FAILED)
    E_SYSTEM_SVR_LOCK_FAILED = 101,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_SYSTEM_LOGIN_FAIL)
    E_SYSTEM_LOGIN_FAIL = 1000001,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_RE_LOGIN_ERR)
    E_RE_LOGIN_ERR = 1000100,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_GET_FAILED)
    E_USER_FRIEND_GET_FAILED = 1009000,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_APPLY_EXSISTS)
    E_USER_FRIEND_APPLY_EXSISTS = 1009001,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_ADD_ALREADY_EXIST)
    E_USER_FRIEND_ADD_ALREADY_EXIST = 1009002,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_DEL_DOSE_NOT_EXIST)
    E_USER_FRIEND_DEL_DOSE_NOT_EXIST = 1009003,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_MOVE_OUT_BLACK_LIST_DOSE_NOT_EXIST)
    E_USER_FRIEND_MOVE_OUT_BLACK_LIST_DOSE_NOT_EXIST = 1009004,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_CAN_NOT_ADD_SELF)
    E_USER_FRIEND_CAN_NOT_ADD_SELF = 1009005,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_ALREADY_SEND_HEART)
    E_USER_FRIEND_ALREADY_SEND_HEART = 1009006,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_NOT_RECV_HEART)
    E_USER_FRIEND_NOT_RECV_HEART = 1009007,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_AMOUNT_EXCEED_MAX)
    E_USER_FRIEND_AMOUNT_EXCEED_MAX = 1009008,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_ALREADY_RECV_HEART)
    E_USER_FRIEND_ALREADY_RECV_HEART = 1009009,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_IN_BLACK_LIST)
    E_USER_FRIEND_IN_BLACK_LIST = 1009010,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_NOT_FOUND)
    E_USER_FRIEND_NOT_FOUND = 1009011,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_APPLY_EXCEED_MAX)
    E_USER_FRIEND_APPLY_EXCEED_MAX = 1009012,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_ALREADY_APPLY)
    E_USER_FRIEND_ALREADY_APPLY = 1009013,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_SEND_HEART_EXCEED_MAX)
    E_USER_FRIEND_SEND_HEART_EXCEED_MAX = 1009014,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_RECV_HEART_EXCEED_MAX)
    E_USER_FRIEND_RECV_HEART_EXCEED_MAX = 1009015,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_NO_SEND_RECV)
    E_USER_FRIEND_NO_SEND_RECV = 1009016,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_BLACK_LIST_AMOUNT_EXCEED_MAX)
    E_USER_FRIEND_BLACK_LIST_AMOUNT_EXCEED_MAX = 1009017,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_APPLY_NOT_EXIST)
    E_USER_FRIEND_APPLY_NOT_EXIST = 1009018,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_MOUDLE_LIMIT)
    E_USER_FRIEND_MOUDLE_LIMIT = 1009019,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_SELF_MOUDLE_LIMIT)
    E_USER_SELF_MOUDLE_LIMIT = 1009020,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_FAMATION_NIL)
    E_USER_FRIEND_FAMATION_NIL = 1009021,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_ADD_EXIST_ERR)
    E_USER_FRIEND_ADD_EXIST_ERR = 1009024,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_ADD_BLACK_ERR)
    E_USER_FRIEND_ADD_BLACK_ERR = 1009025,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_SELFFULL_ERR)
    E_USER_FRIEND_SELFFULL_ERR = 1009026,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_USER_FRIEND_OTHERFULL_ERR)
    E_USER_FRIEND_OTHERFULL_ERR = 1009027,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_FRIEND_GROUP_NOT_EXSITS)
    E_FRIEND_GROUP_NOT_EXSITS = 1009028,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_FRIEND_GROUP_NOT_CREATOR)
    E_FRIEND_GROUP_NOT_CREATOR = 1009029,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_FRIEND_GROUP_NOT_IN)
    E_FRIEND_GROUP_NOT_IN = 1009030,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_FRIEND_GROUP_MEMBER_LIMIT)
    E_FRIEND_GROUP_MEMBER_LIMIT = 1009031,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_FRIEND_GROUP_INVITE_EXSITS)
    E_FRIEND_GROUP_INVITE_EXSITS = 1009032,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_FRIEND_GROUP_APPLY_EXSITS)
    E_FRIEND_GROUP_APPLY_EXSITS = 1009033,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CHAT_NOTALLOW_SPEAK)
    E_CHAT_NOTALLOW_SPEAK = 1010000,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CHAT_SEND_FAILED)
    E_CHAT_SEND_FAILED = 1010001,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CHAT_GET_HISTORY_MESSAGE_FAILED)
    E_CHAT_GET_HISTORY_MESSAGE_FAILED = 1010002,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CHAT_SEND_INVALID_PARAM)
    E_CHAT_SEND_INVALID_PARAM = 1010003,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CROSS_CHAT_INVALID_ROOM_ID)
    E_CROSS_CHAT_INVALID_ROOM_ID = 1010004,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CROSS_CHAT_ROOM_CAN_NOT_FIND)
    E_CROSS_CHAT_ROOM_CAN_NOT_FIND = 1010005,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CROSS_CHAT_CHANGE_SAME_ROOM)
    E_CROSS_CHAT_CHANGE_SAME_ROOM = 1010006,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CROSS_CHAT_CHANGE_ROOM_FULL)
    E_CROSS_CHAT_CHANGE_ROOM_FULL = 1010007,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CHAT_MSG_TOO_OFFEN)
    E_CHAT_MSG_TOO_OFFEN = 1010008,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CHAT_MSG_INVIIBLE_FOR_OTHERS)
    E_CHAT_MSG_INVIIBLE_FOR_OTHERS = 1010010,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CHAT_MSG_TOO_MUCH_REPEAT)
    E_CHAT_MSG_TOO_MUCH_REPEAT = 1010011,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_CHAT_MSG_INCLUDE_SENSITIVE_WORDS)
    E_CHAT_MSG_INCLUDE_SENSITIVE_WORDS = 1010012,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_NOT_HAS_CANUSE_LINE)
    E_NOT_HAS_CANUSE_LINE = 1010030,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_PLACEONTAINER_MERID_ERR)
    E_PLACEONTAINER_MERID_ERR = 1020001,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_PLACEONTAINER_CONTAINER_ERR)
    E_PLACEONTAINER_CONTAINER_ERR = 1020002,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_PLACEONTAINER_PUT_ERR)
    E_PLACEONTAINER_PUT_ERR = 1020003,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_LSTMALL_LAND_ID_ERR)
    E_LSTMALL_LAND_ID_ERR = 1020010,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_MYSQL_SELECT_ERR)
    E_MYSQL_SELECT_ERR = 8000001,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_MYSQL_RECORD_NOT_FOUND)
    E_MYSQL_RECORD_NOT_FOUND = 8000002,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_MYSQL_SAVE_ERR)
    E_MYSQL_SAVE_ERR = 8000003,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_GAME_ERROR_END)
    E_GAME_ERROR_END = 80000000,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_REDIS_COMMOM_ERROR)
    E_REDIS_COMMOM_ERROR = 8100001,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_REDIS_LOCK_ACQUIRE_ERROR)
    E_REDIS_LOCK_ACQUIRE_ERROR = 8100002,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_REDIS_LOCK_RELEASE_ERROR)
    E_REDIS_LOCK_RELEASE_ERROR = 8100003,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_SCENE_HAVE_USRE)
    E_SCENE_HAVE_USRE = 2100001,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_SCENE_PAYING)
    E_SCENE_PAYING = 2100002,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_JIFEN_NOT_ENOUGH)
    E_JIFEN_NOT_ENOUGH = 2100003,
    // @@protoc_insertion_point(enum_value:pbdef.ErrorCode.E_NOT_YOUR_GRANT)
    E_NOT_YOUR_GRANT = 2100004,
}

impl ::protobuf::Enum for ErrorCode {
    const NAME: &'static str = "ErrorCode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorCode> {
        match value {
            0 => ::std::option::Option::Some(ErrorCode::E_NONE),
            1 => ::std::option::Option::Some(ErrorCode::E_UNKNOWN),
            2 => ::std::option::Option::Some(ErrorCode::E_GAMING_SERVER_SHUTDOWN),
            3 => ::std::option::Option::Some(ErrorCode::E_DOES_NOT_LOGIN),
            4 => ::std::option::Option::Some(ErrorCode::E_INVLIAD_REQ),
            5 => ::std::option::Option::Some(ErrorCode::E_TOO_MUCH_REQ),
            6 => ::std::option::Option::Some(ErrorCode::E_CREATE_REGULATION_FAIL),
            7 => ::std::option::Option::Some(ErrorCode::E_STRING_TOO_LONG),
            8 => ::std::option::Option::Some(ErrorCode::E_DOES_NOT_EXIST),
            9 => ::std::option::Option::Some(ErrorCode::E_SERVICE_UNAVAILABLE),
            10 => ::std::option::Option::Some(ErrorCode::E_USER_STATUS_ERR),
            100001 => ::std::option::Option::Some(ErrorCode::E_SYSTEM_ERROR),
            100 => ::std::option::Option::Some(ErrorCode::E_SYSTEM_SVR_DO_NOT_RESPONSE),
            101 => ::std::option::Option::Some(ErrorCode::E_SYSTEM_SVR_LOCK_FAILED),
            1000001 => ::std::option::Option::Some(ErrorCode::E_SYSTEM_LOGIN_FAIL),
            1000100 => ::std::option::Option::Some(ErrorCode::E_RE_LOGIN_ERR),
            1009000 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_GET_FAILED),
            1009001 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_APPLY_EXSISTS),
            1009002 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ADD_ALREADY_EXIST),
            1009003 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_DEL_DOSE_NOT_EXIST),
            1009004 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_MOVE_OUT_BLACK_LIST_DOSE_NOT_EXIST),
            1009005 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_CAN_NOT_ADD_SELF),
            1009006 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ALREADY_SEND_HEART),
            1009007 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_NOT_RECV_HEART),
            1009008 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_AMOUNT_EXCEED_MAX),
            1009009 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ALREADY_RECV_HEART),
            1009010 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_IN_BLACK_LIST),
            1009011 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_NOT_FOUND),
            1009012 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_APPLY_EXCEED_MAX),
            1009013 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ALREADY_APPLY),
            1009014 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_SEND_HEART_EXCEED_MAX),
            1009015 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_RECV_HEART_EXCEED_MAX),
            1009016 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_NO_SEND_RECV),
            1009017 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_BLACK_LIST_AMOUNT_EXCEED_MAX),
            1009018 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_APPLY_NOT_EXIST),
            1009019 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_MOUDLE_LIMIT),
            1009020 => ::std::option::Option::Some(ErrorCode::E_USER_SELF_MOUDLE_LIMIT),
            1009021 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_FAMATION_NIL),
            1009024 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ADD_EXIST_ERR),
            1009025 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ADD_BLACK_ERR),
            1009026 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_SELFFULL_ERR),
            1009027 => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_OTHERFULL_ERR),
            1009028 => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_NOT_EXSITS),
            1009029 => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_NOT_CREATOR),
            1009030 => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_NOT_IN),
            1009031 => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_MEMBER_LIMIT),
            1009032 => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_INVITE_EXSITS),
            1009033 => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_APPLY_EXSITS),
            1010000 => ::std::option::Option::Some(ErrorCode::E_CHAT_NOTALLOW_SPEAK),
            1010001 => ::std::option::Option::Some(ErrorCode::E_CHAT_SEND_FAILED),
            1010002 => ::std::option::Option::Some(ErrorCode::E_CHAT_GET_HISTORY_MESSAGE_FAILED),
            1010003 => ::std::option::Option::Some(ErrorCode::E_CHAT_SEND_INVALID_PARAM),
            1010004 => ::std::option::Option::Some(ErrorCode::E_CROSS_CHAT_INVALID_ROOM_ID),
            1010005 => ::std::option::Option::Some(ErrorCode::E_CROSS_CHAT_ROOM_CAN_NOT_FIND),
            1010006 => ::std::option::Option::Some(ErrorCode::E_CROSS_CHAT_CHANGE_SAME_ROOM),
            1010007 => ::std::option::Option::Some(ErrorCode::E_CROSS_CHAT_CHANGE_ROOM_FULL),
            1010008 => ::std::option::Option::Some(ErrorCode::E_CHAT_MSG_TOO_OFFEN),
            1010010 => ::std::option::Option::Some(ErrorCode::E_CHAT_MSG_INVIIBLE_FOR_OTHERS),
            1010011 => ::std::option::Option::Some(ErrorCode::E_CHAT_MSG_TOO_MUCH_REPEAT),
            1010012 => ::std::option::Option::Some(ErrorCode::E_CHAT_MSG_INCLUDE_SENSITIVE_WORDS),
            1010030 => ::std::option::Option::Some(ErrorCode::E_NOT_HAS_CANUSE_LINE),
            1020001 => ::std::option::Option::Some(ErrorCode::E_PLACEONTAINER_MERID_ERR),
            1020002 => ::std::option::Option::Some(ErrorCode::E_PLACEONTAINER_CONTAINER_ERR),
            1020003 => ::std::option::Option::Some(ErrorCode::E_PLACEONTAINER_PUT_ERR),
            1020010 => ::std::option::Option::Some(ErrorCode::E_LSTMALL_LAND_ID_ERR),
            8000001 => ::std::option::Option::Some(ErrorCode::E_MYSQL_SELECT_ERR),
            8000002 => ::std::option::Option::Some(ErrorCode::E_MYSQL_RECORD_NOT_FOUND),
            8000003 => ::std::option::Option::Some(ErrorCode::E_MYSQL_SAVE_ERR),
            80000000 => ::std::option::Option::Some(ErrorCode::E_GAME_ERROR_END),
            8100001 => ::std::option::Option::Some(ErrorCode::E_REDIS_COMMOM_ERROR),
            8100002 => ::std::option::Option::Some(ErrorCode::E_REDIS_LOCK_ACQUIRE_ERROR),
            8100003 => ::std::option::Option::Some(ErrorCode::E_REDIS_LOCK_RELEASE_ERROR),
            2100001 => ::std::option::Option::Some(ErrorCode::E_SCENE_HAVE_USRE),
            2100002 => ::std::option::Option::Some(ErrorCode::E_SCENE_PAYING),
            2100003 => ::std::option::Option::Some(ErrorCode::E_JIFEN_NOT_ENOUGH),
            2100004 => ::std::option::Option::Some(ErrorCode::E_NOT_YOUR_GRANT),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ErrorCode> {
        match str {
            "E_NONE" => ::std::option::Option::Some(ErrorCode::E_NONE),
            "E_UNKNOWN" => ::std::option::Option::Some(ErrorCode::E_UNKNOWN),
            "E_GAMING_SERVER_SHUTDOWN" => ::std::option::Option::Some(ErrorCode::E_GAMING_SERVER_SHUTDOWN),
            "E_DOES_NOT_LOGIN" => ::std::option::Option::Some(ErrorCode::E_DOES_NOT_LOGIN),
            "E_INVLIAD_REQ" => ::std::option::Option::Some(ErrorCode::E_INVLIAD_REQ),
            "E_TOO_MUCH_REQ" => ::std::option::Option::Some(ErrorCode::E_TOO_MUCH_REQ),
            "E_CREATE_REGULATION_FAIL" => ::std::option::Option::Some(ErrorCode::E_CREATE_REGULATION_FAIL),
            "E_STRING_TOO_LONG" => ::std::option::Option::Some(ErrorCode::E_STRING_TOO_LONG),
            "E_DOES_NOT_EXIST" => ::std::option::Option::Some(ErrorCode::E_DOES_NOT_EXIST),
            "E_SERVICE_UNAVAILABLE" => ::std::option::Option::Some(ErrorCode::E_SERVICE_UNAVAILABLE),
            "E_USER_STATUS_ERR" => ::std::option::Option::Some(ErrorCode::E_USER_STATUS_ERR),
            "E_SYSTEM_ERROR" => ::std::option::Option::Some(ErrorCode::E_SYSTEM_ERROR),
            "E_SYSTEM_SVR_DO_NOT_RESPONSE" => ::std::option::Option::Some(ErrorCode::E_SYSTEM_SVR_DO_NOT_RESPONSE),
            "E_SYSTEM_SVR_LOCK_FAILED" => ::std::option::Option::Some(ErrorCode::E_SYSTEM_SVR_LOCK_FAILED),
            "E_SYSTEM_LOGIN_FAIL" => ::std::option::Option::Some(ErrorCode::E_SYSTEM_LOGIN_FAIL),
            "E_RE_LOGIN_ERR" => ::std::option::Option::Some(ErrorCode::E_RE_LOGIN_ERR),
            "E_USER_FRIEND_GET_FAILED" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_GET_FAILED),
            "E_USER_FRIEND_APPLY_EXSISTS" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_APPLY_EXSISTS),
            "E_USER_FRIEND_ADD_ALREADY_EXIST" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ADD_ALREADY_EXIST),
            "E_USER_FRIEND_DEL_DOSE_NOT_EXIST" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_DEL_DOSE_NOT_EXIST),
            "E_USER_FRIEND_MOVE_OUT_BLACK_LIST_DOSE_NOT_EXIST" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_MOVE_OUT_BLACK_LIST_DOSE_NOT_EXIST),
            "E_USER_FRIEND_CAN_NOT_ADD_SELF" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_CAN_NOT_ADD_SELF),
            "E_USER_FRIEND_ALREADY_SEND_HEART" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ALREADY_SEND_HEART),
            "E_USER_FRIEND_NOT_RECV_HEART" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_NOT_RECV_HEART),
            "E_USER_FRIEND_AMOUNT_EXCEED_MAX" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_AMOUNT_EXCEED_MAX),
            "E_USER_FRIEND_ALREADY_RECV_HEART" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ALREADY_RECV_HEART),
            "E_USER_FRIEND_IN_BLACK_LIST" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_IN_BLACK_LIST),
            "E_USER_FRIEND_NOT_FOUND" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_NOT_FOUND),
            "E_USER_FRIEND_APPLY_EXCEED_MAX" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_APPLY_EXCEED_MAX),
            "E_USER_FRIEND_ALREADY_APPLY" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ALREADY_APPLY),
            "E_USER_FRIEND_SEND_HEART_EXCEED_MAX" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_SEND_HEART_EXCEED_MAX),
            "E_USER_FRIEND_RECV_HEART_EXCEED_MAX" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_RECV_HEART_EXCEED_MAX),
            "E_USER_FRIEND_NO_SEND_RECV" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_NO_SEND_RECV),
            "E_USER_FRIEND_BLACK_LIST_AMOUNT_EXCEED_MAX" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_BLACK_LIST_AMOUNT_EXCEED_MAX),
            "E_USER_FRIEND_APPLY_NOT_EXIST" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_APPLY_NOT_EXIST),
            "E_USER_FRIEND_MOUDLE_LIMIT" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_MOUDLE_LIMIT),
            "E_USER_SELF_MOUDLE_LIMIT" => ::std::option::Option::Some(ErrorCode::E_USER_SELF_MOUDLE_LIMIT),
            "E_USER_FRIEND_FAMATION_NIL" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_FAMATION_NIL),
            "E_USER_FRIEND_ADD_EXIST_ERR" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ADD_EXIST_ERR),
            "E_USER_FRIEND_ADD_BLACK_ERR" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_ADD_BLACK_ERR),
            "E_USER_FRIEND_SELFFULL_ERR" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_SELFFULL_ERR),
            "E_USER_FRIEND_OTHERFULL_ERR" => ::std::option::Option::Some(ErrorCode::E_USER_FRIEND_OTHERFULL_ERR),
            "E_FRIEND_GROUP_NOT_EXSITS" => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_NOT_EXSITS),
            "E_FRIEND_GROUP_NOT_CREATOR" => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_NOT_CREATOR),
            "E_FRIEND_GROUP_NOT_IN" => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_NOT_IN),
            "E_FRIEND_GROUP_MEMBER_LIMIT" => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_MEMBER_LIMIT),
            "E_FRIEND_GROUP_INVITE_EXSITS" => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_INVITE_EXSITS),
            "E_FRIEND_GROUP_APPLY_EXSITS" => ::std::option::Option::Some(ErrorCode::E_FRIEND_GROUP_APPLY_EXSITS),
            "E_CHAT_NOTALLOW_SPEAK" => ::std::option::Option::Some(ErrorCode::E_CHAT_NOTALLOW_SPEAK),
            "E_CHAT_SEND_FAILED" => ::std::option::Option::Some(ErrorCode::E_CHAT_SEND_FAILED),
            "E_CHAT_GET_HISTORY_MESSAGE_FAILED" => ::std::option::Option::Some(ErrorCode::E_CHAT_GET_HISTORY_MESSAGE_FAILED),
            "E_CHAT_SEND_INVALID_PARAM" => ::std::option::Option::Some(ErrorCode::E_CHAT_SEND_INVALID_PARAM),
            "E_CROSS_CHAT_INVALID_ROOM_ID" => ::std::option::Option::Some(ErrorCode::E_CROSS_CHAT_INVALID_ROOM_ID),
            "E_CROSS_CHAT_ROOM_CAN_NOT_FIND" => ::std::option::Option::Some(ErrorCode::E_CROSS_CHAT_ROOM_CAN_NOT_FIND),
            "E_CROSS_CHAT_CHANGE_SAME_ROOM" => ::std::option::Option::Some(ErrorCode::E_CROSS_CHAT_CHANGE_SAME_ROOM),
            "E_CROSS_CHAT_CHANGE_ROOM_FULL" => ::std::option::Option::Some(ErrorCode::E_CROSS_CHAT_CHANGE_ROOM_FULL),
            "E_CHAT_MSG_TOO_OFFEN" => ::std::option::Option::Some(ErrorCode::E_CHAT_MSG_TOO_OFFEN),
            "E_CHAT_MSG_INVIIBLE_FOR_OTHERS" => ::std::option::Option::Some(ErrorCode::E_CHAT_MSG_INVIIBLE_FOR_OTHERS),
            "E_CHAT_MSG_TOO_MUCH_REPEAT" => ::std::option::Option::Some(ErrorCode::E_CHAT_MSG_TOO_MUCH_REPEAT),
            "E_CHAT_MSG_INCLUDE_SENSITIVE_WORDS" => ::std::option::Option::Some(ErrorCode::E_CHAT_MSG_INCLUDE_SENSITIVE_WORDS),
            "E_NOT_HAS_CANUSE_LINE" => ::std::option::Option::Some(ErrorCode::E_NOT_HAS_CANUSE_LINE),
            "E_PLACEONTAINER_MERID_ERR" => ::std::option::Option::Some(ErrorCode::E_PLACEONTAINER_MERID_ERR),
            "E_PLACEONTAINER_CONTAINER_ERR" => ::std::option::Option::Some(ErrorCode::E_PLACEONTAINER_CONTAINER_ERR),
            "E_PLACEONTAINER_PUT_ERR" => ::std::option::Option::Some(ErrorCode::E_PLACEONTAINER_PUT_ERR),
            "E_LSTMALL_LAND_ID_ERR" => ::std::option::Option::Some(ErrorCode::E_LSTMALL_LAND_ID_ERR),
            "E_MYSQL_SELECT_ERR" => ::std::option::Option::Some(ErrorCode::E_MYSQL_SELECT_ERR),
            "E_MYSQL_RECORD_NOT_FOUND" => ::std::option::Option::Some(ErrorCode::E_MYSQL_RECORD_NOT_FOUND),
            "E_MYSQL_SAVE_ERR" => ::std::option::Option::Some(ErrorCode::E_MYSQL_SAVE_ERR),
            "E_GAME_ERROR_END" => ::std::option::Option::Some(ErrorCode::E_GAME_ERROR_END),
            "E_REDIS_COMMOM_ERROR" => ::std::option::Option::Some(ErrorCode::E_REDIS_COMMOM_ERROR),
            "E_REDIS_LOCK_ACQUIRE_ERROR" => ::std::option::Option::Some(ErrorCode::E_REDIS_LOCK_ACQUIRE_ERROR),
            "E_REDIS_LOCK_RELEASE_ERROR" => ::std::option::Option::Some(ErrorCode::E_REDIS_LOCK_RELEASE_ERROR),
            "E_SCENE_HAVE_USRE" => ::std::option::Option::Some(ErrorCode::E_SCENE_HAVE_USRE),
            "E_SCENE_PAYING" => ::std::option::Option::Some(ErrorCode::E_SCENE_PAYING),
            "E_JIFEN_NOT_ENOUGH" => ::std::option::Option::Some(ErrorCode::E_JIFEN_NOT_ENOUGH),
            "E_NOT_YOUR_GRANT" => ::std::option::Option::Some(ErrorCode::E_NOT_YOUR_GRANT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ErrorCode] = &[
        ErrorCode::E_NONE,
        ErrorCode::E_UNKNOWN,
        ErrorCode::E_GAMING_SERVER_SHUTDOWN,
        ErrorCode::E_DOES_NOT_LOGIN,
        ErrorCode::E_INVLIAD_REQ,
        ErrorCode::E_TOO_MUCH_REQ,
        ErrorCode::E_CREATE_REGULATION_FAIL,
        ErrorCode::E_STRING_TOO_LONG,
        ErrorCode::E_DOES_NOT_EXIST,
        ErrorCode::E_SERVICE_UNAVAILABLE,
        ErrorCode::E_USER_STATUS_ERR,
        ErrorCode::E_SYSTEM_ERROR,
        ErrorCode::E_SYSTEM_SVR_DO_NOT_RESPONSE,
        ErrorCode::E_SYSTEM_SVR_LOCK_FAILED,
        ErrorCode::E_SYSTEM_LOGIN_FAIL,
        ErrorCode::E_RE_LOGIN_ERR,
        ErrorCode::E_USER_FRIEND_GET_FAILED,
        ErrorCode::E_USER_FRIEND_APPLY_EXSISTS,
        ErrorCode::E_USER_FRIEND_ADD_ALREADY_EXIST,
        ErrorCode::E_USER_FRIEND_DEL_DOSE_NOT_EXIST,
        ErrorCode::E_USER_FRIEND_MOVE_OUT_BLACK_LIST_DOSE_NOT_EXIST,
        ErrorCode::E_USER_FRIEND_CAN_NOT_ADD_SELF,
        ErrorCode::E_USER_FRIEND_ALREADY_SEND_HEART,
        ErrorCode::E_USER_FRIEND_NOT_RECV_HEART,
        ErrorCode::E_USER_FRIEND_AMOUNT_EXCEED_MAX,
        ErrorCode::E_USER_FRIEND_ALREADY_RECV_HEART,
        ErrorCode::E_USER_FRIEND_IN_BLACK_LIST,
        ErrorCode::E_USER_FRIEND_NOT_FOUND,
        ErrorCode::E_USER_FRIEND_APPLY_EXCEED_MAX,
        ErrorCode::E_USER_FRIEND_ALREADY_APPLY,
        ErrorCode::E_USER_FRIEND_SEND_HEART_EXCEED_MAX,
        ErrorCode::E_USER_FRIEND_RECV_HEART_EXCEED_MAX,
        ErrorCode::E_USER_FRIEND_NO_SEND_RECV,
        ErrorCode::E_USER_FRIEND_BLACK_LIST_AMOUNT_EXCEED_MAX,
        ErrorCode::E_USER_FRIEND_APPLY_NOT_EXIST,
        ErrorCode::E_USER_FRIEND_MOUDLE_LIMIT,
        ErrorCode::E_USER_SELF_MOUDLE_LIMIT,
        ErrorCode::E_USER_FRIEND_FAMATION_NIL,
        ErrorCode::E_USER_FRIEND_ADD_EXIST_ERR,
        ErrorCode::E_USER_FRIEND_ADD_BLACK_ERR,
        ErrorCode::E_USER_FRIEND_SELFFULL_ERR,
        ErrorCode::E_USER_FRIEND_OTHERFULL_ERR,
        ErrorCode::E_FRIEND_GROUP_NOT_EXSITS,
        ErrorCode::E_FRIEND_GROUP_NOT_CREATOR,
        ErrorCode::E_FRIEND_GROUP_NOT_IN,
        ErrorCode::E_FRIEND_GROUP_MEMBER_LIMIT,
        ErrorCode::E_FRIEND_GROUP_INVITE_EXSITS,
        ErrorCode::E_FRIEND_GROUP_APPLY_EXSITS,
        ErrorCode::E_CHAT_NOTALLOW_SPEAK,
        ErrorCode::E_CHAT_SEND_FAILED,
        ErrorCode::E_CHAT_GET_HISTORY_MESSAGE_FAILED,
        ErrorCode::E_CHAT_SEND_INVALID_PARAM,
        ErrorCode::E_CROSS_CHAT_INVALID_ROOM_ID,
        ErrorCode::E_CROSS_CHAT_ROOM_CAN_NOT_FIND,
        ErrorCode::E_CROSS_CHAT_CHANGE_SAME_ROOM,
        ErrorCode::E_CROSS_CHAT_CHANGE_ROOM_FULL,
        ErrorCode::E_CHAT_MSG_TOO_OFFEN,
        ErrorCode::E_CHAT_MSG_INVIIBLE_FOR_OTHERS,
        ErrorCode::E_CHAT_MSG_TOO_MUCH_REPEAT,
        ErrorCode::E_CHAT_MSG_INCLUDE_SENSITIVE_WORDS,
        ErrorCode::E_NOT_HAS_CANUSE_LINE,
        ErrorCode::E_PLACEONTAINER_MERID_ERR,
        ErrorCode::E_PLACEONTAINER_CONTAINER_ERR,
        ErrorCode::E_PLACEONTAINER_PUT_ERR,
        ErrorCode::E_LSTMALL_LAND_ID_ERR,
        ErrorCode::E_MYSQL_SELECT_ERR,
        ErrorCode::E_MYSQL_RECORD_NOT_FOUND,
        ErrorCode::E_MYSQL_SAVE_ERR,
        ErrorCode::E_GAME_ERROR_END,
        ErrorCode::E_REDIS_COMMOM_ERROR,
        ErrorCode::E_REDIS_LOCK_ACQUIRE_ERROR,
        ErrorCode::E_REDIS_LOCK_RELEASE_ERROR,
        ErrorCode::E_SCENE_HAVE_USRE,
        ErrorCode::E_SCENE_PAYING,
        ErrorCode::E_JIFEN_NOT_ENOUGH,
        ErrorCode::E_NOT_YOUR_GRANT,
    ];
}

impl ::protobuf::EnumFull for ErrorCode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ErrorCode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            ErrorCode::E_NONE => 0,
            ErrorCode::E_UNKNOWN => 1,
            ErrorCode::E_GAMING_SERVER_SHUTDOWN => 2,
            ErrorCode::E_DOES_NOT_LOGIN => 3,
            ErrorCode::E_INVLIAD_REQ => 4,
            ErrorCode::E_TOO_MUCH_REQ => 5,
            ErrorCode::E_CREATE_REGULATION_FAIL => 6,
            ErrorCode::E_STRING_TOO_LONG => 7,
            ErrorCode::E_DOES_NOT_EXIST => 8,
            ErrorCode::E_SERVICE_UNAVAILABLE => 9,
            ErrorCode::E_USER_STATUS_ERR => 10,
            ErrorCode::E_SYSTEM_ERROR => 11,
            ErrorCode::E_SYSTEM_SVR_DO_NOT_RESPONSE => 12,
            ErrorCode::E_SYSTEM_SVR_LOCK_FAILED => 13,
            ErrorCode::E_SYSTEM_LOGIN_FAIL => 14,
            ErrorCode::E_RE_LOGIN_ERR => 15,
            ErrorCode::E_USER_FRIEND_GET_FAILED => 16,
            ErrorCode::E_USER_FRIEND_APPLY_EXSISTS => 17,
            ErrorCode::E_USER_FRIEND_ADD_ALREADY_EXIST => 18,
            ErrorCode::E_USER_FRIEND_DEL_DOSE_NOT_EXIST => 19,
            ErrorCode::E_USER_FRIEND_MOVE_OUT_BLACK_LIST_DOSE_NOT_EXIST => 20,
            ErrorCode::E_USER_FRIEND_CAN_NOT_ADD_SELF => 21,
            ErrorCode::E_USER_FRIEND_ALREADY_SEND_HEART => 22,
            ErrorCode::E_USER_FRIEND_NOT_RECV_HEART => 23,
            ErrorCode::E_USER_FRIEND_AMOUNT_EXCEED_MAX => 24,
            ErrorCode::E_USER_FRIEND_ALREADY_RECV_HEART => 25,
            ErrorCode::E_USER_FRIEND_IN_BLACK_LIST => 26,
            ErrorCode::E_USER_FRIEND_NOT_FOUND => 27,
            ErrorCode::E_USER_FRIEND_APPLY_EXCEED_MAX => 28,
            ErrorCode::E_USER_FRIEND_ALREADY_APPLY => 29,
            ErrorCode::E_USER_FRIEND_SEND_HEART_EXCEED_MAX => 30,
            ErrorCode::E_USER_FRIEND_RECV_HEART_EXCEED_MAX => 31,
            ErrorCode::E_USER_FRIEND_NO_SEND_RECV => 32,
            ErrorCode::E_USER_FRIEND_BLACK_LIST_AMOUNT_EXCEED_MAX => 33,
            ErrorCode::E_USER_FRIEND_APPLY_NOT_EXIST => 34,
            ErrorCode::E_USER_FRIEND_MOUDLE_LIMIT => 35,
            ErrorCode::E_USER_SELF_MOUDLE_LIMIT => 36,
            ErrorCode::E_USER_FRIEND_FAMATION_NIL => 37,
            ErrorCode::E_USER_FRIEND_ADD_EXIST_ERR => 38,
            ErrorCode::E_USER_FRIEND_ADD_BLACK_ERR => 39,
            ErrorCode::E_USER_FRIEND_SELFFULL_ERR => 40,
            ErrorCode::E_USER_FRIEND_OTHERFULL_ERR => 41,
            ErrorCode::E_FRIEND_GROUP_NOT_EXSITS => 42,
            ErrorCode::E_FRIEND_GROUP_NOT_CREATOR => 43,
            ErrorCode::E_FRIEND_GROUP_NOT_IN => 44,
            ErrorCode::E_FRIEND_GROUP_MEMBER_LIMIT => 45,
            ErrorCode::E_FRIEND_GROUP_INVITE_EXSITS => 46,
            ErrorCode::E_FRIEND_GROUP_APPLY_EXSITS => 47,
            ErrorCode::E_CHAT_NOTALLOW_SPEAK => 48,
            ErrorCode::E_CHAT_SEND_FAILED => 49,
            ErrorCode::E_CHAT_GET_HISTORY_MESSAGE_FAILED => 50,
            ErrorCode::E_CHAT_SEND_INVALID_PARAM => 51,
            ErrorCode::E_CROSS_CHAT_INVALID_ROOM_ID => 52,
            ErrorCode::E_CROSS_CHAT_ROOM_CAN_NOT_FIND => 53,
            ErrorCode::E_CROSS_CHAT_CHANGE_SAME_ROOM => 54,
            ErrorCode::E_CROSS_CHAT_CHANGE_ROOM_FULL => 55,
            ErrorCode::E_CHAT_MSG_TOO_OFFEN => 56,
            ErrorCode::E_CHAT_MSG_INVIIBLE_FOR_OTHERS => 57,
            ErrorCode::E_CHAT_MSG_TOO_MUCH_REPEAT => 58,
            ErrorCode::E_CHAT_MSG_INCLUDE_SENSITIVE_WORDS => 59,
            ErrorCode::E_NOT_HAS_CANUSE_LINE => 60,
            ErrorCode::E_PLACEONTAINER_MERID_ERR => 61,
            ErrorCode::E_PLACEONTAINER_CONTAINER_ERR => 62,
            ErrorCode::E_PLACEONTAINER_PUT_ERR => 63,
            ErrorCode::E_LSTMALL_LAND_ID_ERR => 64,
            ErrorCode::E_MYSQL_SELECT_ERR => 65,
            ErrorCode::E_MYSQL_RECORD_NOT_FOUND => 66,
            ErrorCode::E_MYSQL_SAVE_ERR => 67,
            ErrorCode::E_GAME_ERROR_END => 68,
            ErrorCode::E_REDIS_COMMOM_ERROR => 69,
            ErrorCode::E_REDIS_LOCK_ACQUIRE_ERROR => 70,
            ErrorCode::E_REDIS_LOCK_RELEASE_ERROR => 71,
            ErrorCode::E_SCENE_HAVE_USRE => 72,
            ErrorCode::E_SCENE_PAYING => 73,
            ErrorCode::E_JIFEN_NOT_ENOUGH => 74,
            ErrorCode::E_NOT_YOUR_GRANT => 75,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ErrorCode {
    fn default() -> Self {
        ErrorCode::E_NONE
    }
}

impl ErrorCode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ErrorCode>("ErrorCode")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fErrorCode.proto\x12\x05pbdef*\x9b\x13\n\tErrorCode\x12\n\n\x06E_NO\
    NE\x10\0\x12\r\n\tE_UNKNOWN\x10\x01\x12\x1c\n\x18E_GAMING_SERVER_SHUTDOW\
    N\x10\x02\x12\x14\n\x10E_DOES_NOT_LOGIN\x10\x03\x12\x11\n\rE_INVLIAD_REQ\
    \x10\x04\x12\x12\n\x0eE_TOO_MUCH_REQ\x10\x05\x12\x1c\n\x18E_CREATE_REGUL\
    ATION_FAIL\x10\x06\x12\x15\n\x11E_STRING_TOO_LONG\x10\x07\x12\x14\n\x10E\
    _DOES_NOT_EXIST\x10\x08\x12\x19\n\x15E_SERVICE_UNAVAILABLE\x10\t\x12\x15\
    \n\x11E_USER_STATUS_ERR\x10\n\x12\x14\n\x0eE_SYSTEM_ERROR\x10\xa1\x8d\
    \x06\x12\x20\n\x1cE_SYSTEM_SVR_DO_NOT_RESPONSE\x10d\x12\x1c\n\x18E_SYSTE\
    M_SVR_LOCK_FAILED\x10e\x12\x19\n\x13E_SYSTEM_LOGIN_FAIL\x10\xc1\x84=\x12\
    \x14\n\x0eE_RE_LOGIN_ERR\x10\xa4\x85=\x12\x1e\n\x18E_USER_FRIEND_GET_FAI\
    LED\x10\xe8\xca=\x12!\n\x1bE_USER_FRIEND_APPLY_EXSISTS\x10\xe9\xca=\x12%\
    \n\x1fE_USER_FRIEND_ADD_ALREADY_EXIST\x10\xea\xca=\x12&\n\x20E_USER_FRIE\
    ND_DEL_DOSE_NOT_EXIST\x10\xeb\xca=\x126\n0E_USER_FRIEND_MOVE_OUT_BLACK_L\
    IST_DOSE_NOT_EXIST\x10\xec\xca=\x12$\n\x1eE_USER_FRIEND_CAN_NOT_ADD_SELF\
    \x10\xed\xca=\x12&\n\x20E_USER_FRIEND_ALREADY_SEND_HEART\x10\xee\xca=\
    \x12\"\n\x1cE_USER_FRIEND_NOT_RECV_HEART\x10\xef\xca=\x12%\n\x1fE_USER_F\
    RIEND_AMOUNT_EXCEED_MAX\x10\xf0\xca=\x12&\n\x20E_USER_FRIEND_ALREADY_REC\
    V_HEART\x10\xf1\xca=\x12!\n\x1bE_USER_FRIEND_IN_BLACK_LIST\x10\xf2\xca=\
    \x12\x1d\n\x17E_USER_FRIEND_NOT_FOUND\x10\xf3\xca=\x12$\n\x1eE_USER_FRIE\
    ND_APPLY_EXCEED_MAX\x10\xf4\xca=\x12!\n\x1bE_USER_FRIEND_ALREADY_APPLY\
    \x10\xf5\xca=\x12)\n#E_USER_FRIEND_SEND_HEART_EXCEED_MAX\x10\xf6\xca=\
    \x12)\n#E_USER_FRIEND_RECV_HEART_EXCEED_MAX\x10\xf7\xca=\x12\x20\n\x1aE_\
    USER_FRIEND_NO_SEND_RECV\x10\xf8\xca=\x120\n*E_USER_FRIEND_BLACK_LIST_AM\
    OUNT_EXCEED_MAX\x10\xf9\xca=\x12#\n\x1dE_USER_FRIEND_APPLY_NOT_EXIST\x10\
    \xfa\xca=\x12\x20\n\x1aE_USER_FRIEND_MOUDLE_LIMIT\x10\xfb\xca=\x12\x1e\n\
    \x18E_USER_SELF_MOUDLE_LIMIT\x10\xfc\xca=\x12\x20\n\x1aE_USER_FRIEND_FAM\
    ATION_NIL\x10\xfd\xca=\x12!\n\x1bE_USER_FRIEND_ADD_EXIST_ERR\x10\x80\xcb\
    =\x12!\n\x1bE_USER_FRIEND_ADD_BLACK_ERR\x10\x81\xcb=\x12\x20\n\x1aE_USER\
    _FRIEND_SELFFULL_ERR\x10\x82\xcb=\x12!\n\x1bE_USER_FRIEND_OTHERFULL_ERR\
    \x10\x83\xcb=\x12\x1f\n\x19E_FRIEND_GROUP_NOT_EXSITS\x10\x84\xcb=\x12\
    \x20\n\x1aE_FRIEND_GROUP_NOT_CREATOR\x10\x85\xcb=\x12\x1b\n\x15E_FRIEND_\
    GROUP_NOT_IN\x10\x86\xcb=\x12!\n\x1bE_FRIEND_GROUP_MEMBER_LIMIT\x10\x87\
    \xcb=\x12\"\n\x1cE_FRIEND_GROUP_INVITE_EXSITS\x10\x88\xcb=\x12!\n\x1bE_F\
    RIEND_GROUP_APPLY_EXSITS\x10\x89\xcb=\x12\x1b\n\x15E_CHAT_NOTALLOW_SPEAK\
    \x10\xd0\xd2=\x12\x18\n\x12E_CHAT_SEND_FAILED\x10\xd1\xd2=\x12'\n!E_CHAT\
    _GET_HISTORY_MESSAGE_FAILED\x10\xd2\xd2=\x12\x1f\n\x19E_CHAT_SEND_INVALI\
    D_PARAM\x10\xd3\xd2=\x12\"\n\x1cE_CROSS_CHAT_INVALID_ROOM_ID\x10\xd4\xd2\
    =\x12$\n\x1eE_CROSS_CHAT_ROOM_CAN_NOT_FIND\x10\xd5\xd2=\x12#\n\x1dE_CROS\
    S_CHAT_CHANGE_SAME_ROOM\x10\xd6\xd2=\x12#\n\x1dE_CROSS_CHAT_CHANGE_ROOM_\
    FULL\x10\xd7\xd2=\x12\x1a\n\x14E_CHAT_MSG_TOO_OFFEN\x10\xd8\xd2=\x12$\n\
    \x1eE_CHAT_MSG_INVIIBLE_FOR_OTHERS\x10\xda\xd2=\x12\x20\n\x1aE_CHAT_MSG_\
    TOO_MUCH_REPEAT\x10\xdb\xd2=\x12(\n\"E_CHAT_MSG_INCLUDE_SENSITIVE_WORDS\
    \x10\xdc\xd2=\x12\x1b\n\x15E_NOT_HAS_CANUSE_LINE\x10\xee\xd2=\x12\x1f\n\
    \x19E_PLACEONTAINER_MERID_ERR\x10\xe1\xa0>\x12#\n\x1dE_PLACEONTAINER_CON\
    TAINER_ERR\x10\xe2\xa0>\x12\x1d\n\x17E_PLACEONTAINER_PUT_ERR\x10\xe3\xa0\
    >\x12\x1b\n\x15E_LSTMALL_LAND_ID_ERR\x10\xea\xa0>\x12\x19\n\x12E_MYSQL_S\
    ELECT_ERR\x10\x81\xa4\xe8\x03\x12\x1f\n\x18E_MYSQL_RECORD_NOT_FOUND\x10\
    \x82\xa4\xe8\x03\x12\x17\n\x10E_MYSQL_SAVE_ERR\x10\x83\xa4\xe8\x03\x12\
    \x17\n\x10E_GAME_ERROR_END\x10\x80\xe8\x92&\x12\x1b\n\x14E_REDIS_COMMOM_\
    ERROR\x10\xa1\xb1\xee\x03\x12!\n\x1aE_REDIS_LOCK_ACQUIRE_ERROR\x10\xa2\
    \xb1\xee\x03\x12!\n\x1aE_REDIS_LOCK_RELEASE_ERROR\x10\xa3\xb1\xee\x03\
    \x12\x18\n\x11E_SCENE_HAVE_USRE\x10\xa1\x96\x80\x01\x12\x15\n\x0eE_SCENE\
    _PAYING\x10\xa2\x96\x80\x01\x12\x19\n\x12E_JIFEN_NOT_ENOUGH\x10\xa3\x96\
    \x80\x01\x12\x17\n\x10E_NOT_YOUR_GRANT\x10\xa4\x96\x80\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ErrorCode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
