// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `Login.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:pbdef.LoginReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LoginReq {
    // message fields
    // @@protoc_insertion_point(field:pbdef.LoginReq.login_platform_data)
    pub login_platform_data: ::protobuf::MessageField<super::UserData::LoginPlatformData>,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.LoginReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LoginReq {
    fn default() -> &'a LoginReq {
        <LoginReq as ::protobuf::Message>::default_instance()
    }
}

impl LoginReq {
    pub fn new() -> LoginReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::UserData::LoginPlatformData>(
            "login_platform_data",
            |m: &LoginReq| { &m.login_platform_data },
            |m: &mut LoginReq| { &mut m.login_platform_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LoginReq>(
            "LoginReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LoginReq {
    const NAME: &'static str = "LoginReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.login_platform_data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.login_platform_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.login_platform_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LoginReq {
        LoginReq::new()
    }

    fn clear(&mut self) {
        self.login_platform_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LoginReq {
        static instance: LoginReq = LoginReq {
            login_platform_data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LoginReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LoginReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LoginReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.LoginRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LoginRsp {
    // message fields
    // @@protoc_insertion_point(field:pbdef.LoginRsp.ret)
    pub ret: i32,
    // @@protoc_insertion_point(field:pbdef.LoginRsp.userData)
    pub userData: ::protobuf::MessageField<super::UserData::UserSnapshot>,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.LoginRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LoginRsp {
    fn default() -> &'a LoginRsp {
        <LoginRsp as ::protobuf::Message>::default_instance()
    }
}

impl LoginRsp {
    pub fn new() -> LoginRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ret",
            |m: &LoginRsp| { &m.ret },
            |m: &mut LoginRsp| { &mut m.ret },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::UserData::UserSnapshot>(
            "userData",
            |m: &LoginRsp| { &m.userData },
            |m: &mut LoginRsp| { &mut m.userData },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LoginRsp>(
            "LoginRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LoginRsp {
    const NAME: &'static str = "LoginRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ret = is.read_int32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.userData)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ret != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.ret);
        }
        if let Some(v) = self.userData.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ret != 0 {
            os.write_int32(1, self.ret)?;
        }
        if let Some(v) = self.userData.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LoginRsp {
        LoginRsp::new()
    }

    fn clear(&mut self) {
        self.ret = 0;
        self.userData.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LoginRsp {
        static instance: LoginRsp = LoginRsp {
            ret: 0,
            userData: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LoginRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LoginRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LoginRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.ReLoginReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReLoginReq {
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.ReLoginReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReLoginReq {
    fn default() -> &'a ReLoginReq {
        <ReLoginReq as ::protobuf::Message>::default_instance()
    }
}

impl ReLoginReq {
    pub fn new() -> ReLoginReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReLoginReq>(
            "ReLoginReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReLoginReq {
    const NAME: &'static str = "ReLoginReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReLoginReq {
        ReLoginReq::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReLoginReq {
        static instance: ReLoginReq = ReLoginReq {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReLoginReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReLoginReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReLoginReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReLoginReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.ReLoginRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ReLoginRsp {
    // message fields
    // @@protoc_insertion_point(field:pbdef.ReLoginRsp.ret)
    pub ret: i32,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.ReLoginRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ReLoginRsp {
    fn default() -> &'a ReLoginRsp {
        <ReLoginRsp as ::protobuf::Message>::default_instance()
    }
}

impl ReLoginRsp {
    pub fn new() -> ReLoginRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ret",
            |m: &ReLoginRsp| { &m.ret },
            |m: &mut ReLoginRsp| { &mut m.ret },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ReLoginRsp>(
            "ReLoginRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ReLoginRsp {
    const NAME: &'static str = "ReLoginRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ret = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ret != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.ret);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ret != 0 {
            os.write_int32(1, self.ret)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ReLoginRsp {
        ReLoginRsp::new()
    }

    fn clear(&mut self) {
        self.ret = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ReLoginRsp {
        static instance: ReLoginRsp = ReLoginRsp {
            ret: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ReLoginRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ReLoginRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ReLoginRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReLoginRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.OnlineReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OnlineReq {
    // message fields
    // @@protoc_insertion_point(field:pbdef.OnlineReq.ret)
    pub ret: i32,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.OnlineReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OnlineReq {
    fn default() -> &'a OnlineReq {
        <OnlineReq as ::protobuf::Message>::default_instance()
    }
}

impl OnlineReq {
    pub fn new() -> OnlineReq {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ret",
            |m: &OnlineReq| { &m.ret },
            |m: &mut OnlineReq| { &mut m.ret },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OnlineReq>(
            "OnlineReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OnlineReq {
    const NAME: &'static str = "OnlineReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ret = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ret != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.ret);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ret != 0 {
            os.write_int32(1, self.ret)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OnlineReq {
        OnlineReq::new()
    }

    fn clear(&mut self) {
        self.ret = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OnlineReq {
        static instance: OnlineReq = OnlineReq {
            ret: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OnlineReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OnlineReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OnlineReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OnlineReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.OnlineRsp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OnlineRsp {
    // message fields
    // @@protoc_insertion_point(field:pbdef.OnlineRsp.ret)
    pub ret: i32,
    // @@protoc_insertion_point(field:pbdef.OnlineRsp.server_time)
    pub server_time: u64,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.OnlineRsp.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OnlineRsp {
    fn default() -> &'a OnlineRsp {
        <OnlineRsp as ::protobuf::Message>::default_instance()
    }
}

impl OnlineRsp {
    pub fn new() -> OnlineRsp {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ret",
            |m: &OnlineRsp| { &m.ret },
            |m: &mut OnlineRsp| { &mut m.ret },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "server_time",
            |m: &OnlineRsp| { &m.server_time },
            |m: &mut OnlineRsp| { &mut m.server_time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OnlineRsp>(
            "OnlineRsp",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OnlineRsp {
    const NAME: &'static str = "OnlineRsp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ret = is.read_int32()?;
                },
                16 => {
                    self.server_time = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ret != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.ret);
        }
        if self.server_time != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.server_time);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ret != 0 {
            os.write_int32(1, self.ret)?;
        }
        if self.server_time != 0 {
            os.write_uint64(2, self.server_time)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OnlineRsp {
        OnlineRsp::new()
    }

    fn clear(&mut self) {
        self.ret = 0;
        self.server_time = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OnlineRsp {
        static instance: OnlineRsp = OnlineRsp {
            ret: 0,
            server_time: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OnlineRsp {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OnlineRsp").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OnlineRsp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OnlineRsp {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.SystemMessageNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SystemMessageNotify {
    // message fields
    // @@protoc_insertion_point(field:pbdef.SystemMessageNotify.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.SystemMessageNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SystemMessageNotify {
    fn default() -> &'a SystemMessageNotify {
        <SystemMessageNotify as ::protobuf::Message>::default_instance()
    }
}

impl SystemMessageNotify {
    pub fn new() -> SystemMessageNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &SystemMessageNotify| { &m.message },
            |m: &mut SystemMessageNotify| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SystemMessageNotify>(
            "SystemMessageNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SystemMessageNotify {
    const NAME: &'static str = "SystemMessageNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SystemMessageNotify {
        SystemMessageNotify::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SystemMessageNotify {
        static instance: SystemMessageNotify = SystemMessageNotify {
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SystemMessageNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SystemMessageNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SystemMessageNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SystemMessageNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.SystemOfflineNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SystemOfflineNotify {
    // message fields
    // @@protoc_insertion_point(field:pbdef.SystemOfflineNotify.type)
    pub type_: i32,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.SystemOfflineNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SystemOfflineNotify {
    fn default() -> &'a SystemOfflineNotify {
        <SystemOfflineNotify as ::protobuf::Message>::default_instance()
    }
}

impl SystemOfflineNotify {
    pub fn new() -> SystemOfflineNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &SystemOfflineNotify| { &m.type_ },
            |m: &mut SystemOfflineNotify| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SystemOfflineNotify>(
            "SystemOfflineNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SystemOfflineNotify {
    const NAME: &'static str = "SystemOfflineNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.type_);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != 0 {
            os.write_int32(1, self.type_)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SystemOfflineNotify {
        SystemOfflineNotify::new()
    }

    fn clear(&mut self) {
        self.type_ = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SystemOfflineNotify {
        static instance: SystemOfflineNotify = SystemOfflineNotify {
            type_: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SystemOfflineNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SystemOfflineNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SystemOfflineNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SystemOfflineNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.ConnectionExpireNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ConnectionExpireNotify {
    // message fields
    // @@protoc_insertion_point(field:pbdef.ConnectionExpireNotify.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.ConnectionExpireNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectionExpireNotify {
    fn default() -> &'a ConnectionExpireNotify {
        <ConnectionExpireNotify as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionExpireNotify {
    pub fn new() -> ConnectionExpireNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &ConnectionExpireNotify| { &m.message },
            |m: &mut ConnectionExpireNotify| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConnectionExpireNotify>(
            "ConnectionExpireNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConnectionExpireNotify {
    const NAME: &'static str = "ConnectionExpireNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConnectionExpireNotify {
        ConnectionExpireNotify::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectionExpireNotify {
        static instance: ConnectionExpireNotify = ConnectionExpireNotify {
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectionExpireNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectionExpireNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectionExpireNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionExpireNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.ServerWillShutdownNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerWillShutdownNotify {
    // message fields
    // @@protoc_insertion_point(field:pbdef.ServerWillShutdownNotify.type)
    pub type_: u32,
    // @@protoc_insertion_point(field:pbdef.ServerWillShutdownNotify.additional_message)
    pub additional_message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.ServerWillShutdownNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServerWillShutdownNotify {
    fn default() -> &'a ServerWillShutdownNotify {
        <ServerWillShutdownNotify as ::protobuf::Message>::default_instance()
    }
}

impl ServerWillShutdownNotify {
    pub fn new() -> ServerWillShutdownNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ServerWillShutdownNotify| { &m.type_ },
            |m: &mut ServerWillShutdownNotify| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "additional_message",
            |m: &ServerWillShutdownNotify| { &m.additional_message },
            |m: &mut ServerWillShutdownNotify| { &mut m.additional_message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerWillShutdownNotify>(
            "ServerWillShutdownNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServerWillShutdownNotify {
    const NAME: &'static str = "ServerWillShutdownNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_uint32()?;
                },
                18 => {
                    self.additional_message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.type_);
        }
        if !self.additional_message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.additional_message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != 0 {
            os.write_uint32(1, self.type_)?;
        }
        if !self.additional_message.is_empty() {
            os.write_string(2, &self.additional_message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServerWillShutdownNotify {
        ServerWillShutdownNotify::new()
    }

    fn clear(&mut self) {
        self.type_ = 0;
        self.additional_message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServerWillShutdownNotify {
        static instance: ServerWillShutdownNotify = ServerWillShutdownNotify {
            type_: 0,
            additional_message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServerWillShutdownNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServerWillShutdownNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServerWillShutdownNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerWillShutdownNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.BeKickOutNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BeKickOutNotify {
    // message fields
    // @@protoc_insertion_point(field:pbdef.BeKickOutNotify.additional_message)
    pub additional_message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.BeKickOutNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BeKickOutNotify {
    fn default() -> &'a BeKickOutNotify {
        <BeKickOutNotify as ::protobuf::Message>::default_instance()
    }
}

impl BeKickOutNotify {
    pub fn new() -> BeKickOutNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "additional_message",
            |m: &BeKickOutNotify| { &m.additional_message },
            |m: &mut BeKickOutNotify| { &mut m.additional_message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BeKickOutNotify>(
            "BeKickOutNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BeKickOutNotify {
    const NAME: &'static str = "BeKickOutNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.additional_message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.additional_message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.additional_message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.additional_message.is_empty() {
            os.write_string(1, &self.additional_message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BeKickOutNotify {
        BeKickOutNotify::new()
    }

    fn clear(&mut self) {
        self.additional_message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BeKickOutNotify {
        static instance: BeKickOutNotify = BeKickOutNotify {
            additional_message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BeKickOutNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BeKickOutNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BeKickOutNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BeKickOutNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbdef.ServerLostNotify)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerLostNotify {
    // message fields
    // @@protoc_insertion_point(field:pbdef.ServerLostNotify.type)
    pub type_: u32,
    // @@protoc_insertion_point(field:pbdef.ServerLostNotify.additional_message)
    pub additional_message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:pbdef.ServerLostNotify.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServerLostNotify {
    fn default() -> &'a ServerLostNotify {
        <ServerLostNotify as ::protobuf::Message>::default_instance()
    }
}

impl ServerLostNotify {
    pub fn new() -> ServerLostNotify {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ServerLostNotify| { &m.type_ },
            |m: &mut ServerLostNotify| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "additional_message",
            |m: &ServerLostNotify| { &m.additional_message },
            |m: &mut ServerLostNotify| { &mut m.additional_message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerLostNotify>(
            "ServerLostNotify",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServerLostNotify {
    const NAME: &'static str = "ServerLostNotify";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_uint32()?;
                },
                18 => {
                    self.additional_message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.type_);
        }
        if !self.additional_message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.additional_message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != 0 {
            os.write_uint32(1, self.type_)?;
        }
        if !self.additional_message.is_empty() {
            os.write_string(2, &self.additional_message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServerLostNotify {
        ServerLostNotify::new()
    }

    fn clear(&mut self) {
        self.type_ = 0;
        self.additional_message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServerLostNotify {
        static instance: ServerLostNotify = ServerLostNotify {
            type_: 0,
            additional_message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServerLostNotify {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServerLostNotify").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServerLostNotify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerLostNotify {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:pbdef.SystemOfflineType)
pub enum SystemOfflineType {
    // @@protoc_insertion_point(enum_value:pbdef.SystemOfflineType.NONE)
    NONE = 0,
    // @@protoc_insertion_point(enum_value:pbdef.SystemOfflineType.OCCUPY)
    OCCUPY = 1,
}

impl ::protobuf::Enum for SystemOfflineType {
    const NAME: &'static str = "SystemOfflineType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SystemOfflineType> {
        match value {
            0 => ::std::option::Option::Some(SystemOfflineType::NONE),
            1 => ::std::option::Option::Some(SystemOfflineType::OCCUPY),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<SystemOfflineType> {
        match str {
            "NONE" => ::std::option::Option::Some(SystemOfflineType::NONE),
            "OCCUPY" => ::std::option::Option::Some(SystemOfflineType::OCCUPY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [SystemOfflineType] = &[
        SystemOfflineType::NONE,
        SystemOfflineType::OCCUPY,
    ];
}

impl ::protobuf::EnumFull for SystemOfflineType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("SystemOfflineType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for SystemOfflineType {
    fn default() -> Self {
        SystemOfflineType::NONE
    }
}

impl SystemOfflineType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<SystemOfflineType>("SystemOfflineType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bLogin.proto\x12\x05pbdef\x1a\x0eUserData.protoP\0\"T\n\x08LoginReq\
    \x12H\n\x13login_platform_data\x18\x01\x20\x01(\x0b2\x18.pbdef.LoginPlat\
    formDataR\x11loginPlatformData\"M\n\x08LoginRsp\x12\x10\n\x03ret\x18\x01\
    \x20\x01(\x05R\x03ret\x12/\n\x08userData\x18\x02\x20\x01(\x0b2\x13.pbdef\
    .UserSnapshotR\x08userData\"\x0c\n\nReLoginReq\"\x1e\n\nReLoginRsp\x12\
    \x10\n\x03ret\x18\x01\x20\x01(\x05R\x03ret\"\x1d\n\tOnlineReq\x12\x10\n\
    \x03ret\x18\x01\x20\x01(\x05R\x03ret\">\n\tOnlineRsp\x12\x10\n\x03ret\
    \x18\x01\x20\x01(\x05R\x03ret\x12\x1f\n\x0bserver_time\x18\x02\x20\x01(\
    \x04R\nserverTime\"/\n\x13SystemMessageNotify\x12\x18\n\x07message\x18\
    \x01\x20\x01(\tR\x07message\")\n\x13SystemOfflineNotify\x12\x12\n\x04typ\
    e\x18\x01\x20\x01(\x05R\x04type\"2\n\x16ConnectionExpireNotify\x12\x18\n\
    \x07message\x18\x01\x20\x01(\tR\x07message\"]\n\x18ServerWillShutdownNot\
    ify\x12\x12\n\x04type\x18\x01\x20\x01(\rR\x04type\x12-\n\x12additional_m\
    essage\x18\x02\x20\x01(\tR\x11additionalMessage\"@\n\x0fBeKickOutNotify\
    \x12-\n\x12additional_message\x18\x01\x20\x01(\tR\x11additionalMessage\"\
    U\n\x10ServerLostNotify\x12\x12\n\x04type\x18\x01\x20\x01(\rR\x04type\
    \x12-\n\x12additional_message\x18\x02\x20\x01(\tR\x11additionalMessage*)\
    \n\x11SystemOfflineType\x12\x08\n\x04NONE\x10\0\x12\n\n\x06OCCUPY\x10\
    \x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::UserData::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(12);
            messages.push(LoginReq::generated_message_descriptor_data());
            messages.push(LoginRsp::generated_message_descriptor_data());
            messages.push(ReLoginReq::generated_message_descriptor_data());
            messages.push(ReLoginRsp::generated_message_descriptor_data());
            messages.push(OnlineReq::generated_message_descriptor_data());
            messages.push(OnlineRsp::generated_message_descriptor_data());
            messages.push(SystemMessageNotify::generated_message_descriptor_data());
            messages.push(SystemOfflineNotify::generated_message_descriptor_data());
            messages.push(ConnectionExpireNotify::generated_message_descriptor_data());
            messages.push(ServerWillShutdownNotify::generated_message_descriptor_data());
            messages.push(BeKickOutNotify::generated_message_descriptor_data());
            messages.push(ServerLostNotify::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(SystemOfflineType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
