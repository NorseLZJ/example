// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netcmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_netcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_netcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_netcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_netcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_netcmd_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_netcmd_2eproto_metadata_getter(int index);
namespace netcmd {
class Billboard;
struct BillboardDefaultTypeInternal;
extern BillboardDefaultTypeInternal _Billboard_default_instance_;
class EnterGsNotify;
struct EnterGsNotifyDefaultTypeInternal;
extern EnterGsNotifyDefaultTypeInternal _EnterGsNotify_default_instance_;
}  // namespace netcmd
PROTOBUF_NAMESPACE_OPEN
template<> ::netcmd::Billboard* Arena::CreateMaybeMessage<::netcmd::Billboard>(Arena*);
template<> ::netcmd::EnterGsNotify* Arena::CreateMaybeMessage<::netcmd::EnterGsNotify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace netcmd {

// ===================================================================

class Billboard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:netcmd.Billboard) */ {
 public:
  inline Billboard() : Billboard(nullptr) {}
  virtual ~Billboard();
  explicit constexpr Billboard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Billboard(const Billboard& from);
  Billboard(Billboard&& from) noexcept
    : Billboard() {
    *this = ::std::move(from);
  }

  inline Billboard& operator=(const Billboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Billboard& operator=(Billboard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Billboard& default_instance() {
    return *internal_default_instance();
  }
  static inline const Billboard* internal_default_instance() {
    return reinterpret_cast<const Billboard*>(
               &_Billboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Billboard& a, Billboard& b) {
    a.Swap(&b);
  }
  inline void Swap(Billboard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Billboard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Billboard* New() const final {
    return CreateMaybeMessage<Billboard>(nullptr);
  }

  Billboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Billboard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Billboard& from);
  void MergeFrom(const Billboard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Billboard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "netcmd.Billboard";
  }
  protected:
  explicit Billboard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netcmd_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:netcmd.Billboard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_netcmd_2eproto;
};
// -------------------------------------------------------------------

class EnterGsNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:netcmd.EnterGsNotify) */ {
 public:
  inline EnterGsNotify() : EnterGsNotify(nullptr) {}
  virtual ~EnterGsNotify();
  explicit constexpr EnterGsNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterGsNotify(const EnterGsNotify& from);
  EnterGsNotify(EnterGsNotify&& from) noexcept
    : EnterGsNotify() {
    *this = ::std::move(from);
  }

  inline EnterGsNotify& operator=(const EnterGsNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterGsNotify& operator=(EnterGsNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterGsNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterGsNotify* internal_default_instance() {
    return reinterpret_cast<const EnterGsNotify*>(
               &_EnterGsNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnterGsNotify& a, EnterGsNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterGsNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterGsNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterGsNotify* New() const final {
    return CreateMaybeMessage<EnterGsNotify>(nullptr);
  }

  EnterGsNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterGsNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterGsNotify& from);
  void MergeFrom(const EnterGsNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterGsNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "netcmd.EnterGsNotify";
  }
  protected:
  explicit EnterGsNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netcmd_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTimeFieldNumber = 1,
    kServerOpenTimeFieldNumber = 3,
    kServerVersionFieldNumber = 2,
    kClientfuncswitchFieldNumber = 4,
  };
  // string serverTime = 1;
  void clear_servertime();
  const std::string& servertime() const;
  void set_servertime(const std::string& value);
  void set_servertime(std::string&& value);
  void set_servertime(const char* value);
  void set_servertime(const char* value, size_t size);
  std::string* mutable_servertime();
  std::string* release_servertime();
  void set_allocated_servertime(std::string* servertime);
  private:
  const std::string& _internal_servertime() const;
  void _internal_set_servertime(const std::string& value);
  std::string* _internal_mutable_servertime();
  public:

  // string serverOpenTime = 3;
  void clear_serveropentime();
  const std::string& serveropentime() const;
  void set_serveropentime(const std::string& value);
  void set_serveropentime(std::string&& value);
  void set_serveropentime(const char* value);
  void set_serveropentime(const char* value, size_t size);
  std::string* mutable_serveropentime();
  std::string* release_serveropentime();
  void set_allocated_serveropentime(std::string* serveropentime);
  private:
  const std::string& _internal_serveropentime() const;
  void _internal_set_serveropentime(const std::string& value);
  std::string* _internal_mutable_serveropentime();
  public:

  // uint32 serverVersion = 2;
  void clear_serverversion();
  ::PROTOBUF_NAMESPACE_ID::uint32 serverversion() const;
  void set_serverversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serverversion() const;
  void _internal_set_serverversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 clientfuncswitch = 4;
  void clear_clientfuncswitch();
  ::PROTOBUF_NAMESPACE_ID::uint32 clientfuncswitch() const;
  void set_clientfuncswitch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clientfuncswitch() const;
  void _internal_set_clientfuncswitch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:netcmd.EnterGsNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servertime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serveropentime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serverversion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clientfuncswitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_netcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Billboard

// string msg = 1;
inline void Billboard::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Billboard::msg() const {
  // @@protoc_insertion_point(field_get:netcmd.Billboard.msg)
  return _internal_msg();
}
inline void Billboard::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:netcmd.Billboard.msg)
}
inline std::string* Billboard::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:netcmd.Billboard.msg)
  return _internal_mutable_msg();
}
inline const std::string& Billboard::_internal_msg() const {
  return msg_.Get();
}
inline void Billboard::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Billboard::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:netcmd.Billboard.msg)
}
inline void Billboard::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:netcmd.Billboard.msg)
}
inline void Billboard::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:netcmd.Billboard.msg)
}
inline std::string* Billboard::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Billboard::release_msg() {
  // @@protoc_insertion_point(field_release:netcmd.Billboard.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Billboard::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:netcmd.Billboard.msg)
}

// -------------------------------------------------------------------

// EnterGsNotify

// string serverTime = 1;
inline void EnterGsNotify::clear_servertime() {
  servertime_.ClearToEmpty();
}
inline const std::string& EnterGsNotify::servertime() const {
  // @@protoc_insertion_point(field_get:netcmd.EnterGsNotify.serverTime)
  return _internal_servertime();
}
inline void EnterGsNotify::set_servertime(const std::string& value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:netcmd.EnterGsNotify.serverTime)
}
inline std::string* EnterGsNotify::mutable_servertime() {
  // @@protoc_insertion_point(field_mutable:netcmd.EnterGsNotify.serverTime)
  return _internal_mutable_servertime();
}
inline const std::string& EnterGsNotify::_internal_servertime() const {
  return servertime_.Get();
}
inline void EnterGsNotify::_internal_set_servertime(const std::string& value) {
  
  servertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EnterGsNotify::set_servertime(std::string&& value) {
  
  servertime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:netcmd.EnterGsNotify.serverTime)
}
inline void EnterGsNotify::set_servertime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:netcmd.EnterGsNotify.serverTime)
}
inline void EnterGsNotify::set_servertime(const char* value,
    size_t size) {
  
  servertime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:netcmd.EnterGsNotify.serverTime)
}
inline std::string* EnterGsNotify::_internal_mutable_servertime() {
  
  return servertime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EnterGsNotify::release_servertime() {
  // @@protoc_insertion_point(field_release:netcmd.EnterGsNotify.serverTime)
  return servertime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnterGsNotify::set_allocated_servertime(std::string* servertime) {
  if (servertime != nullptr) {
    
  } else {
    
  }
  servertime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servertime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:netcmd.EnterGsNotify.serverTime)
}

// uint32 serverVersion = 2;
inline void EnterGsNotify::clear_serverversion() {
  serverversion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterGsNotify::_internal_serverversion() const {
  return serverversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterGsNotify::serverversion() const {
  // @@protoc_insertion_point(field_get:netcmd.EnterGsNotify.serverVersion)
  return _internal_serverversion();
}
inline void EnterGsNotify::_internal_set_serverversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serverversion_ = value;
}
inline void EnterGsNotify::set_serverversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serverversion(value);
  // @@protoc_insertion_point(field_set:netcmd.EnterGsNotify.serverVersion)
}

// string serverOpenTime = 3;
inline void EnterGsNotify::clear_serveropentime() {
  serveropentime_.ClearToEmpty();
}
inline const std::string& EnterGsNotify::serveropentime() const {
  // @@protoc_insertion_point(field_get:netcmd.EnterGsNotify.serverOpenTime)
  return _internal_serveropentime();
}
inline void EnterGsNotify::set_serveropentime(const std::string& value) {
  _internal_set_serveropentime(value);
  // @@protoc_insertion_point(field_set:netcmd.EnterGsNotify.serverOpenTime)
}
inline std::string* EnterGsNotify::mutable_serveropentime() {
  // @@protoc_insertion_point(field_mutable:netcmd.EnterGsNotify.serverOpenTime)
  return _internal_mutable_serveropentime();
}
inline const std::string& EnterGsNotify::_internal_serveropentime() const {
  return serveropentime_.Get();
}
inline void EnterGsNotify::_internal_set_serveropentime(const std::string& value) {
  
  serveropentime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EnterGsNotify::set_serveropentime(std::string&& value) {
  
  serveropentime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:netcmd.EnterGsNotify.serverOpenTime)
}
inline void EnterGsNotify::set_serveropentime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serveropentime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:netcmd.EnterGsNotify.serverOpenTime)
}
inline void EnterGsNotify::set_serveropentime(const char* value,
    size_t size) {
  
  serveropentime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:netcmd.EnterGsNotify.serverOpenTime)
}
inline std::string* EnterGsNotify::_internal_mutable_serveropentime() {
  
  return serveropentime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EnterGsNotify::release_serveropentime() {
  // @@protoc_insertion_point(field_release:netcmd.EnterGsNotify.serverOpenTime)
  return serveropentime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnterGsNotify::set_allocated_serveropentime(std::string* serveropentime) {
  if (serveropentime != nullptr) {
    
  } else {
    
  }
  serveropentime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serveropentime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:netcmd.EnterGsNotify.serverOpenTime)
}

// uint32 clientfuncswitch = 4;
inline void EnterGsNotify::clear_clientfuncswitch() {
  clientfuncswitch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterGsNotify::_internal_clientfuncswitch() const {
  return clientfuncswitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnterGsNotify::clientfuncswitch() const {
  // @@protoc_insertion_point(field_get:netcmd.EnterGsNotify.clientfuncswitch)
  return _internal_clientfuncswitch();
}
inline void EnterGsNotify::_internal_set_clientfuncswitch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  clientfuncswitch_ = value;
}
inline void EnterGsNotify::set_clientfuncswitch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clientfuncswitch(value);
  // @@protoc_insertion_point(field_set:netcmd.EnterGsNotify.clientfuncswitch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace netcmd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_netcmd_2eproto
